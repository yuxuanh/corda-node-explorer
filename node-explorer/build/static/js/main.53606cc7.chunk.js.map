{"version":3,"sources":["components/SnackbarComponent.jsx","store/Actions.js","store/reducers/CommonReducer.js","store/reducers/ExplorerReducer.js","store/reducers/TxExplorerReducer.js","store/reducers/VaultReducer.js","store/reducers/DashboardReducer.js","components/BoxWithTitle.jsx","components/ListBoxWithTitle.jsx","components/Pin.jsx","screens/CordaNetwork.jsx","screens/TransactionExplorer.jsx","crda-logo.svg","components/Header.jsx","components/Splash.jsx","screens/Login.jsx","components/SideMenuNew.jsx","components/Filter.jsx","screens/VaultExplorer.jsx","components/Tile.jsx","components/NodeDiagnostic.jsx","components/DonutChart.jsx","components/NetworkParameter.jsx","screens/Dashboard.jsx","screens/Settings.jsx","Explorer.jsx","serviceWorker.js","index.js"],"names":["SnackbarComponent","props","className","variant","button","Consumer","value","icon","onClick","NotificationService","dismiss","message","SERVER_BASE_URL","LOAD_APP_STATE","SERVER_AWAKE","LOGIN_SUCCESS","LOGOUT","LOAD_NETWORK","CHANGE_SCREEN","LOAD_FLOWS","LOAD_FLOW_PARAMS","LOAD_TRNXS","LOAD_PARTIES","LOAD_STATES","LOAD_VAULT_FILTERS","UPDATE_PARAM_VAL","CLOSE_TX_MODAL","OPEN_TX_MODAL","SET_FLOW_SELECTION_FLAG","SET_INFLIGHT_FLOW_FLAG","SET_LOGIN_PROCESSING_FLAG","SHOW_HIDE_SPINNER","LOAD_NODE_DIAGNOSTIC","LOAD_NETWORK_PARAMETERS","updateSettings","settings","type","axios","post","then","data","status","addNotification","errorHandler","catch","error","response","request","initialState","isServerAwake","isLoggedIn","currentPage","loginProcessing","spinner","profile","reducer","state","action","ActionType","sessionStorage","setItem","JSON","stringify","payload","page","getItem","Number","parse","removeItem","netWorkMap","showNotaries","showPeers","registeredFlows","flowParams","trnxList","parties","showTxPopup","isFlowSelected","isFlowInFlight","flowMessage","messageType","flowInfoList","transactionData","trnxListPage","totalRecords","vaultStates","stateMetadata","states","statesMetadata","totalResults","totalStatesAvailable","filters","nodeDiagnostic","nodeDiagnosticSpinner","networkParameter","networkParameterSpinner","BoxWithTitle","useState","show","setShow","Fragment","node","style","padding","display","fontSize","fontWeight","marginBottom","name","publicKey","city","country","address","ListBoxWithTitle","list","paddingBottom","title","map","index","margin","backgroundColor","Pin","top","left","CordaNetwork","screenHeight","screenWidth","screenYRelative","pos","Math","log","tan","PI","handleImageLoaded","updateWindowDimensions","window","addEventListener","update","bind","viewFrame","innerHeight","scroll","refs","mapPane","scrollTop","onNetworkLoad","this","forceUpdate","clientWidth","e","posX","posY","size","position","height","outerHeight","overflowY","ref","src","alt","width","onLoad","self","notaries","peers","getScreenYPos","lat","getScreenXPos","lng","Component","connect","explorer","dispatch","get","TransactionExplorer","handleClose","setState","paramList","selectedFlow","loadFlowParams","closeTxModal","handleOpen","openTxModal","handleFlowSelection","event","i","length","flow","flowName","target","flowParamsMap","Constructor_1","constructors","activeConstructor","setFlowSelectionFlag","handleFlowConstructorSelection","updateState","ParamValues","handleChangePage","newPage","console","pageSize","offset","trnxDetail","loadNewPage","fetchTrnxList","handleChangeRowsPerPage","prepareFlowDataToStart","inFlightFLow","flowInfo","startFlow","showTrnxDetails","trnx","txDetail","isOpen","renderJson","jsonObj","lvl","Object","keys","key","paramValues","fetchFlowList","fetchParties","innerForm","deep","delIdx","param","updateCmplxListParam","renderInnerForm","hasParameterizedType","paramType","renderParamForm","paramName","color","marginTop","fullWidth","label","onChange","paramValue","autoWidth","helpText","party","TextField","getHelperText","onBlur","InputLabelProps","shrink","helperText","renderListParam","parameterizedType","updateListParam","idx","val","flag","undefined","push","keyVal","splice","open","onClose","overflow","id","constructor","flowSelected","float","disabled","flowInFlight","iconRight","transactionList","cursor","transactionId","lg","inputTypes","typeCnt","count","outputTypes","commands","command","closeOnOutsideClick","spacing","xs","inputs","input","stateRef","txhash","item","outputs","output","minWidth","signers","sig","signature","bytes","partyName","TablePagination","rowsPerPageOptions","component","rowsPerPage","onPageChange","onRowsPerPageChange","flowResultMsg","flowResultMsgType","common","onLogout","logo","href","logoSrc","React","anchorRef","useRef","prevOpen","useEffect","current","focus","center","closeOnSelectOption","positionX","positionY","trigger","splashScreen","Login","hostName","port","username","password","ssh","sshChecked","touched","sshPort","sshUsername","sshPassword","handleBlur","field","evt","validate","shouldMarkError","hasError","shouldShow","doLogin","errors","some","x","onLoginAction","isDisabled","fluid","md","errorMessage","onLoadAction","Splash","retryClient","create","baseURL","axiosRetry","retries","retryDelay","retryCount","loginRequest","changeScreen","toggable","active","Filter","stateType","notary","relevancy","handleScroll","winScroll","document","body","documentElement","filterPane","removeEventListener","handler","checked","filter","stateTypes","minHeight","Grid","container","FormControlLabel","control","Checkbox","handleStateTypeUpdate","handleStatusUpdate","handleRelevancyUpdate","handlePartiesUpdate","VaultExplorer","statuses","relevancies","handleFilterUpdate","handleStateFilters","handleStatusFilters","handleRelevancyFilters","handlePartyFilters","fetchStates","marginLeft","fetchFilters","statesMetaData","contractStateClassName","contract","recordedTime","consumedTime","relevancyStatus","onChangePage","vault","Tile","children","footer","NodeDiagnostic","vendor","version","platformVersion","right","cordapps","cordapp","shortName","licence","marginRight","minimumPlatformVersion","targetPlatformVersion","DonutChart","ResponsiveContainer","PieChart","Pie","cx","cy","innerRadius","outerRadius","fill","dataKey","entry","Cell","singleColor","valueLabel","NetworkParameter","maxTransactionSize","modifiedTime","epoch","identity","validating","whitelistedContractImplementations","Dashboard","fetchNodeDiagnostics","fetchNetworkParamters","dashboard","Settings","cordappDirectory","dateFormat","dateTimeFormat","dirty","loadSettings","handleChange","Explorer","getApplicationState","sm","SideMenuNew","onLoginSuccess","Boolean","location","hostname","match","rootReducer","combineReducers","commonReducer","explorerReducer","txReducer","toastr","toastrReducer","vltReducer","dsbdReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","timeOut","newestOnTop","preventDuplicates","getState","transitionIn","transitionOut","progressBar","s","closeOnToastrClick","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53606cc7.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  IconCustom,\r\n  NotificationService,\r\n  Snackbar,\r\n  snackbarIdContext,\r\n} from 'r3-tooling-design-system/lib/exports.js';\r\n\r\n\r\nconst SnackbarComponent = (props) => {\r\n  return (\r\n    <>\r\n      <Snackbar\r\n        className=\"toasty\"\r\n        variant={props.variant}\r\n        button={\r\n          <snackbarIdContext.Consumer>\r\n            {(value) => (\r\n              <IconCustom\r\n                icon=\"Close\"\r\n                className=\"inline h-5 pb-1 text-blue cursor-pointer\"\r\n                onClick={() => NotificationService.dismiss(value)}\r\n                \r\n              >close</IconCustom>\r\n            )}\r\n          </snackbarIdContext.Consumer>\r\n        }\r\n      >\r\n        {props.message}\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SnackbarComponent;\r\n","import axios from 'axios';\r\nimport axiosRetry from \"axios-retry\";\r\nimport {toastr} from 'react-redux-toastr'\r\nimport {NotificationService} from 'r3-tooling-design-system';\r\nimport SnackbarComponent from '../components/SnackbarComponent';\r\nexport const SERVER_BASE_URL = \"http://localhost:8580\";\r\nexport const LOAD_APP_STATE = \"LOAD_APP_STATE\";\r\nexport const SERVER_AWAKE = 'SERVER_AWAKE';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const LOAD_NETWORK = \"LOAD_NETWORK\";\r\nexport const CHANGE_SCREEN = \"CHANGE_SCREEN\";\r\nexport const LOAD_FLOWS = \"LOAD_FLOWS\";\r\nexport const LOAD_FLOW_PARAMS = \"LOAD_FLOW_PARAMS\";\r\nexport const LOAD_TRNXS = \"LOAD_TRANDSACTIONS\";\r\nexport const LOAD_PARTIES = \"LOAD_PARTIES\";\r\nexport const LOAD_STATES = \"LOAD_STATES\";\r\nexport const LOAD_VAULT_FILTERS = \"LOAD_VAULT_FILTERS\";\r\nexport const UPDATE_PARAM_VAL = \"UPDATE_PARAM_VAL\";\r\nexport const CLOSE_TX_MODAL = \"CLOSE_TX_MODAL\";\r\nexport const OPEN_TX_MODAL = \"OPEN_TX_MODAL\";\r\nexport const SET_FLOW_SELECTION_FLAG = \"SET_FLOW_SELECTION_FLAG\";\r\nexport const SET_INFLIGHT_FLOW_FLAG = \"SET_INFLIGHT_FLOW_FLAG\";\r\nexport const SET_LOGIN_PROCESSING_FLAG = \"SET_LOGIN_PROCESSING_FLAG\";\r\nexport const SHOW_HIDE_SPINNER = \"SHOW_HIDE_SPINNER\";\r\nexport const LOAD_NODE_DIAGNOSTIC = \"LOAD_NODE_DIAGNOSTIC\";\r\nexport const LOAD_NETWORK_PARAMETERS = \"LOAD_NETWORK_PARAMETERS\";\r\n\r\nexport const server_awake = () => {\r\n    // Sets flag notifying successful access to Spring server\r\n    return function(dispatch) {\r\n        const retryClient = axios.create({ baseURL: SERVER_BASE_URL })\r\n        axiosRetry(retryClient, { retries: 5, retryDelay: (retryCount) => {\r\n                return retryCount * 2000;\r\n            }});\r\n        retryClient.get(\"/server_awake\")\r\n            .then(({data}) => {\r\n                //console.log(data);\r\n                if(data.status) {\r\n                    dispatch({\r\n                        type: SERVER_AWAKE,\r\n                    })\r\n                }\r\n            })\r\n            // TODO: throw custom internal error\r\n            .catch(error => {\r\n                errorHandler(error);\r\n            });\r\n    }\r\n}\r\n\r\nexport const login = (loginRequest) => {\r\n    return function(dispatch) {\r\n        dispatch({type: SET_LOGIN_PROCESSING_FLAG, data: true});\r\n        axios.post(SERVER_BASE_URL + \"/login\", loginRequest)\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                dispatch({\r\n                        type: LOGIN_SUCCESS,\r\n                        payload: data.data\r\n                })\r\n            } else {\r\n                dispatch({type: SET_LOGIN_PROCESSING_FLAG, data: false});\r\n                errorHandler(data);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: SET_LOGIN_PROCESSING_FLAG, data: false});\r\n            errorHandler(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchNodeDiagnostic = () => {\r\n    return function(dispatch) {\r\n        axios.get(SERVER_BASE_URL + \"/dashboard/node-diagnostics\")\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                dispatch({    \r\n                        type: LOAD_NODE_DIAGNOSTIC,\r\n                        payload: data.data\r\n                })\r\n            }else{\r\n                errorHandler(data);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            errorHandler(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchNetworkParameter = () => {\r\n    return function(dispatch) {\r\n        axios.get(SERVER_BASE_URL + \"/dashboard/network-parameters\")\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                dispatch({    \r\n                        type: LOAD_NETWORK_PARAMETERS,\r\n                        payload: data.data\r\n                })\r\n            }else{\r\n                errorHandler(data);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            errorHandler(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchNetworkMap = () => {\r\n    return function(dispatch) {\r\n        dispatch({type: SHOW_HIDE_SPINNER, data: true});\r\n        axios.get(SERVER_BASE_URL + \"/network-map\")\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                dispatch({    \r\n                        type: LOAD_NETWORK,\r\n                        payload: data.data\r\n                })\r\n            }else{\r\n                errorHandler(data);\r\n            }\r\n            dispatch({type: SHOW_HIDE_SPINNER, data: false});\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: SHOW_HIDE_SPINNER, data: false});\r\n            errorHandler(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchFlows = () => {\r\n    return function(dispatch){\r\n        axios.get(SERVER_BASE_URL + \"/flow-list\")\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                dispatch({    \r\n                    type: LOAD_FLOWS,\r\n                    payload: data.data\r\n                })\r\n            }else{\r\n                errorHandler(data);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            errorHandler(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchTransactions = (page) => {\r\n    return function(dispatch){\r\n        dispatch({type: SHOW_HIDE_SPINNER, data: true});\r\n        axios.post(SERVER_BASE_URL + \"/transaction-list\", page)\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                dispatch({    \r\n                    type: LOAD_TRNXS,\r\n                    payload: data.data\r\n                })\r\n            }else{\r\n                errorHandler(data);\r\n            }\r\n            dispatch({type: SHOW_HIDE_SPINNER, data: false});\r\n        })\r\n        .catch(error => {\r\n            errorHandler(error);\r\n            dispatch({type: SHOW_HIDE_SPINNER, data: false});\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchParties = () => {\r\n    return function(dispatch){\r\n        axios.get(SERVER_BASE_URL + \"/party-list\")\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                dispatch({    \r\n                    type: LOAD_PARTIES,\r\n                    payload: data.data\r\n                })\r\n            }else{\r\n                errorHandler(data);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            errorHandler(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const startFlow = (flowInfo) => {\r\n    return function(dispatch){\r\n        axios.post(SERVER_BASE_URL + \"/start-flow\", flowInfo)\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                //toastr.success(\"Flow completed successfully!\");\r\n                dispatch({type: SET_INFLIGHT_FLOW_FLAG, data: false, message: data.data, messageType: true});\r\n                axios.post(SERVER_BASE_URL + \"/transaction-list\", {pageSize: 8, offset: 0})\r\n                .then(({data}) => {\r\n                    if(data.status){\r\n                        dispatch({    \r\n                            type: LOAD_TRNXS,\r\n                            payload: data.data\r\n                        })\r\n                         NotificationService.addNotification(\r\n                            <SnackbarComponent variant=\"success\" message=\"Flow Created\"/>\r\n                            );\r\n                    }else{\r\n                        errorHandler(data);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    errorHandler(error);\r\n                });\r\n            }else{\r\n                dispatch({type: SET_INFLIGHT_FLOW_FLAG, data: false});\r\n                errorHandler(data);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: SET_INFLIGHT_FLOW_FLAG, data: false});\r\n            errorHandler(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchStates = (filters) => {\r\n    return function(dispatch){\r\n        dispatch({type: SHOW_HIDE_SPINNER, data: true});\r\n        axios.post(SERVER_BASE_URL + \"/vault-query\", filters)\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                dispatch({    \r\n                    type: LOAD_STATES,\r\n                    payload: data.data\r\n                })\r\n            }else{\r\n                errorHandler(data);\r\n            }\r\n            dispatch({type: SHOW_HIDE_SPINNER, data: false});\r\n        })\r\n        .catch(error => {\r\n            errorHandler(error);\r\n            dispatch({type: SHOW_HIDE_SPINNER, data: false});\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchVaultFilters = () => {\r\n    return function(dispatch){\r\n        axios.get(SERVER_BASE_URL + \"/vault-filter\")\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                dispatch({    \r\n                    type: LOAD_VAULT_FILTERS,\r\n                    payload: data.data\r\n                })\r\n            }else{\r\n                errorHandler(data);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            errorHandler(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const updateSettings = (settings, type) => {\r\n    axios.post(SERVER_BASE_URL + \"/settings/\"+ type, settings)\r\n    .then(({data}) => {\r\n        if (data.status) {\r\n             NotificationService.addNotification(\r\n            <SnackbarComponent className=\"custom-toast\" variant=\"success\" message=\"Settings updated successfully!\" />\r\n            );          \r\n        }else{\r\n            errorHandler(data);\r\n        }\r\n    }).catch( error => {\r\n        errorHandler(error);\r\n    });\r\n}\r\n\r\nexport const errorHandler = error => {\r\n    if(error.message){       \r\n         NotificationService.addNotification(\r\n            <SnackbarComponent className=\"custom-toast\" variant=\"danger\" message={error.message} />\r\n        );\r\n    }\r\n    else if (error.response) {\r\n        NotificationService.addNotification(\r\n            <SnackbarComponent className=\"custom-toast\" variant=\"danger\" message={error.response.data} />\r\n        );\r\n    } else if (error.request) {\r\n        NotificationService.addNotification(\r\n            <SnackbarComponent className=\"custom-toast\" variant=\"danger\" message=\"The Server is unavailable, Please try again later!\" />\r\n        );\r\n    } else {\r\n        NotificationService.addNotification(\r\n            <SnackbarComponent className=\"custom-toast\" variant=\"danger\" message=\"Something went wrong, Please try again later\" />\r\n        );\r\n    }\r\n}","import * as ActionType from '../Actions';\r\n\r\nconst initialState = {\r\n    isServerAwake: false,\r\n    isLoggedIn: false,\r\n    currentPage: 1,\r\n    loginProcessing: false,\r\n    spinner: false,\r\n    profile: {}\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        case ActionType.SERVER_AWAKE:\r\n            return {\r\n                ...state,\r\n                isServerAwake: true\r\n            }\r\n        case ActionType.LOGIN_SUCCESS:\r\n            sessionStorage.setItem('isLoggedIn', true);    \r\n            sessionStorage.setItem('profile', JSON.stringify(action.payload));   \r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                profile: action.payload,\r\n                loginProcessing: false\r\n            }\r\n        case ActionType.CHANGE_SCREEN:\r\n            sessionStorage.setItem('currentPage', action.page);    \r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        case ActionType.LOAD_APP_STATE: \r\n            const isLoggedIn = sessionStorage.getItem(\"isLoggedIn\");\r\n            const currentPage = Number(sessionStorage.getItem(\"currentPage\"));\r\n            const profile =  JSON.parse(sessionStorage.getItem('profile'));   \r\n            return{\r\n                ...state,\r\n                isLoggedIn: isLoggedIn,\r\n                currentPage: currentPage,\r\n                profile: profile\r\n            }\r\n        case ActionType.LOGOUT: \r\n            sessionStorage.removeItem(\"isLoggedIn\");\r\n            sessionStorage.removeItem(\"currentPage\");\r\n            return{\r\n                ...state,\r\n                isLoggedIn: false,\r\n                currentPage: 0\r\n            }    \r\n        case ActionType.SET_LOGIN_PROCESSING_FLAG:\r\n            return{\r\n                ...state,\r\n                loginProcessing: action.data\r\n            }\r\n        case ActionType.SHOW_HIDE_SPINNER:\r\n            return{\r\n                ...state,\r\n                spinner: action.data\r\n            }     \r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\nexport default reducer;","import * as ActionType from '../Actions';\r\n\r\nconst initialState = {\r\n    netWorkMap: {},\r\n    showNotaries: true,\r\n    showPeers: true,\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        case ActionType.LOAD_NETWORK:\r\n            return {\r\n                ...state,\r\n                netWorkMap: action.payload\r\n            } \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as ActionType from '../Actions';\r\n\r\nconst initialState = {\r\n    registeredFlows: [],\r\n    flowParams: [],\r\n    trnxList:[],\r\n    parties: [],\r\n    showTxPopup: false,\r\n    isFlowSelected: false,\r\n    isFlowInFlight: false,\r\n    flowMessage: \"\",\r\n    messageType: true\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        case ActionType.LOAD_FLOWS:\r\n            return {\r\n                ...state,\r\n                registeredFlows: action.payload.flowInfoList\r\n            }\r\n        case ActionType.LOAD_FLOW_PARAMS:\r\n            return {\r\n                ...state,\r\n                flowParams: action.data,\r\n                flowMessage: \"\",\r\n                messageType: true\r\n            }\r\n        case ActionType.LOAD_TRNXS:\r\n            return {\r\n                ...state,\r\n                trnxList: action.payload.transactionData,\r\n                trnxListPage: action.payload.totalRecords,\r\n                //showTxPopup: false,\r\n                //isFlowSelected: false\r\n            }       \r\n        case ActionType.LOAD_PARTIES:\r\n            return {\r\n                ...state,\r\n                parties: action.payload\r\n            }   \r\n        case ActionType.UPDATE_PARAM_VAL:\r\n            return{\r\n                ...state,\r\n                flowParams: action.data\r\n            }    \r\n        case ActionType.CLOSE_TX_MODAL:\r\n            return{\r\n                ...state,\r\n                showTxPopup: false,\r\n                isFlowSelected: false,\r\n                flowMessage: \"\",\r\n                messageType: true\r\n            } \r\n        case ActionType.OPEN_TX_MODAL:\r\n            return{\r\n                ...state,\r\n                showTxPopup: true       \r\n            }\r\n        case ActionType.SET_FLOW_SELECTION_FLAG:\r\n            return{\r\n                ...state,\r\n                isFlowSelected: true\r\n            }\r\n        case ActionType.SET_INFLIGHT_FLOW_FLAG:\r\n            return{\r\n                ...state,\r\n                isFlowInFlight: action.data,\r\n                flowMessage: action.message,\r\n                messageType: action.messageType\r\n        }           \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as ActionType from '../Actions';\r\n\r\nconst initialState = {\r\n    vaultStates: [],\r\n    stateMetadata: []\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        case ActionType.LOAD_STATES:\r\n            return {\r\n                ...state,\r\n                vaultStates: action.payload.states,\r\n                stateMetadata: action.payload.statesMetadata,\r\n                totalResults: action.payload.totalStatesAvailable\r\n            } \r\n        case ActionType.LOAD_VAULT_FILTERS:\r\n            return {\r\n                ...state,\r\n                filters: action.payload\r\n            }  \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as ActionType from '../Actions';\r\n\r\nconst initialState = {\r\n    nodeDiagnostic: {},\r\n    nodeDiagnosticSpinner: true,\r\n    networkParameter: {},\r\n    networkParameterSpinner: true\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        case ActionType.LOAD_NODE_DIAGNOSTIC:\r\n            return {\r\n                ...state,\r\n                nodeDiagnostic: action.payload,\r\n                nodeDiagnosticSpinner: false\r\n            }\r\n        case ActionType.LOAD_NETWORK_PARAMETERS:\r\n            return{\r\n                ...state,\r\n                networkParameter: action.payload,\r\n                networkParameterSpinner: false\r\n            }\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\nexport default reducer;","import React, {useState} from 'react';\r\nimport '../styles/Network.scss';\r\n\r\nconst BoxWithTitle = props => {\r\n    const [show, setShow] = useState(true);\r\n\r\n    const toggle = () => {\r\n        setShow(!show);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n        { props.node? \r\n            <div className=\"node-container\">\r\n                <div className=\"node-type\" onClick={toggle}>My Identity<span>{show? \"-\" : \"+\"}</span></div>\r\n                <div style={{padding: 10, display: show? 'block': 'none'}}>\r\n                    <p style={{fontSize: 16, fontWeight: \"bold\", marginBottom: 5}}>{props.node.name}</p>\r\n                    <div>\r\n                    <p><strong>Public Key:</strong> {props.node.publicKey}</p>\r\n                    <p><strong>Location: </strong> {props.node.city}, {props.node.country}</p>\r\n                    <p><strong>Address:</strong> {props.node.address}</p>\r\n                    </div>\r\n                </div>\r\n            </div> : null\r\n        }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default BoxWithTitle;","import React, {useState} from 'react';\r\nimport '../styles/Network.scss';\r\n\r\nconst ListBoxWithTitle = props => {\r\n    const [show, setShow] = useState(true);\r\n\r\n    const toggle = () => {\r\n        setShow(!show);\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        { props.list? \r\n          <div className=\"node-container\" style={{paddingBottom: 1}}>\r\n            <div className=\"node-type\" onClick={toggle}>{props.title}\r\n                <span>{show? \"-\" : \"+\"}</span>\r\n            </div>     \r\n            \r\n            <div style={{display: show? 'block': 'none'}}>\r\n                {\r\n                  props.list.map((node, index) => {\r\n                    return (\r\n                      <div key={index} style={{padding: 10, margin: 5, backgroundColor: \"rgba(0, 0, 0, 0.3)\"}}>\r\n                            <p style={{fontSize: 16, fontWeight: \"bold\", marginBottom: 5}}>{node.name}</p>\r\n                            <div>\r\n                              <p><strong>Public Key: </strong> {node.publicKey}</p>\r\n                              <p><strong>Location: </strong> {node.city}, {node.country}</p>\r\n                              <p><strong>Address: </strong> {node.address}</p>\r\n                            </div>\r\n                        </div>\r\n                      )\r\n                    })\r\n                }\r\n            </div>\r\n          </div>: null\r\n        }\r\n      </React.Fragment>  \r\n    )\r\n}\r\n\r\nexport default ListBoxWithTitle;","import React from 'react';\r\nimport '../styles/Network.scss';\r\n\r\nconst Pin = props => {\r\n    return (\r\n        <div className=\"pin\" style={{top: props.top, left: props.left}}>\r\n                    <p>{props.name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pin;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as ActionType from '../store/Actions';\r\nimport { PageHeader } from 'r3-tooling-design-system';\r\nimport '../styles/Network.scss';\r\nimport BoxWithTitle from '../components/BoxWithTitle';\r\nimport ListBoxWithTitle from '../components/ListBoxWithTitle';\r\nimport Pin from '../components/Pin';\r\n \r\nclass CordaNetwork extends Component{\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    props.onNetworkLoad();\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n\r\n  screenHeight = 0;\r\n  screenWidth = 0;\r\n  \r\n  update(){\r\n      this.forceUpdate();\r\n      this.updateWindowDimensions();\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    try{\r\n      this.screenWidth = this.refs.mapPane.clientWidth;\r\n      this.screenHeight = this.screenWidth;\r\n    }catch(e){}\r\n  }\r\n\r\n  getScreenXPos(posX){\r\n      return this.screenWidth * (posX + 180) / 360 - 5;\r\n  }\r\n\r\n  getScreenYPos(posY){\r\n      return this.screenHeight * (this.screenYRelative(posY) - \r\n          this.screenYRelative(85.05)) / (this.screenYRelative(-85.05) - this.screenYRelative(85.05)) - 5\r\n  }\r\n\r\n  screenYRelative = (pos) => {\r\n      return Math.log(Math.tan(pos/ 360 * Math.PI + Math.PI/4))\r\n  }\r\n\r\n  handleImageLoaded = () => {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.update.bind(this));\r\n    let viewFrame = window.innerHeight - 60;\r\n    let scroll = (this.screenHeight - viewFrame)/3;\r\n    this.refs.mapPane.scrollTop = scroll;\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"content-pane\">\r\n        <PageHeader title=\"Network\" size=\"small\" className=\"custom-node-explorer-header\" >\r\n             Network\r\n        </PageHeader>\r\n         <div style={{position: \"relative\", height:window.outerHeight, overflowY: \"auto\"}} ref=\"mapPane\">\r\n        <img src=\"WorldMapSquare.png\" alt=\"World Map\" width=\"100%\" onLoad={this.handleImageLoaded.bind(this)}></img>\r\n        <div style={{position: \"absolute\", top: \"0\"}}>\r\n          <div className=\"side-panel\" style={{height:window.innerHeight - 60}}>\r\n              <BoxWithTitle node={this.props.self}/>\r\n              <ListBoxWithTitle list={this.props.notaries} title=\"Notaries\"/>\r\n              <ListBoxWithTitle list={this.props.peers} title=\"Peers\"/>\r\n          </div>\r\n        </div>\r\n\r\n        {\r\n          this.props.self? \r\n          <Pin top={this.getScreenYPos(this.props.self.lat)} \r\n                left={this.getScreenXPos(this.props.self.lng)} \r\n                name={this.props.self.name}/>\r\n          : null\r\n        }\r\n        {   \r\n            this.props.notaries?\r\n            this.props.notaries.map((node, index) => {\r\n              return  <Pin key={index} top={this.getScreenYPos(node.lat)} \r\n                            left={this.getScreenXPos(node.lng)} \r\n                            name={node.name}/>\r\n            }): null\r\n        }\r\n        {\r\n            this.props.peers?\r\n            this.props.peers.map((node, index) => {\r\n              return  <Pin key={index}  top={this.getScreenYPos(node.lat)} \r\n                            left={this.getScreenXPos(node.lng)} \r\n                            name={node.name}/>\r\n            }): null\r\n        }\r\n      </div>\r\n     \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        self: state.explorer.netWorkMap.self,\r\n        notaries: state.explorer.netWorkMap.notaries,\r\n        peers: state.explorer.netWorkMap.peers\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n      onNetworkLoad: () => dispatch(ActionType.fetchNetworkMap())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CordaNetwork);","import { TextField, TablePagination } from '@material-ui/core';\r\nimport ForwardIcon from '@material-ui/icons/Forward';\r\nimport React, { Component } from 'react';\r\nimport {Column, PageHeader, Row, Drawer, Button, Container, DashboardItem, Option, Select, TooltipWrapper, FormGroup, Card, IconCustom} from 'r3-tooling-design-system';\r\nimport { connect } from 'react-redux';\r\nimport SnackbarComponent from '../components/SnackbarComponent';\r\nimport * as ActionType from '../store/Actions';\r\nimport '../styles/Transaction.scss';\r\n\r\nclass TransactionExplorer extends Component{\r\n\r\n    \r\n\r\n      constructor(props){\r\n          super(props);\r\n           this.state =  {\r\n            page: {\r\n                pageSize: 8,\r\n                offset: 0\r\n            \r\n            },\r\n            flowInfo: {},\r\n            selectedFlow: {},\r\n            trnxDetail: [],\r\n            paramList: [],\r\n            isOpen: false,\r\n            paramValues: []\r\n        }\r\n        props.fetchFlowList();\r\n        props.fetchTrnxList(this.state.page);\r\n        props.fetchParties();\r\n          \r\n       \r\n\r\n    }\r\n\r\n   \r\n\r\n    handleClose = () => {\r\n        this.setState({paramList: [], selectedFlow: {}})\r\n        this.props.loadFlowParams([]);\r\n        this.props.closeTxModal();\r\n    }\r\n\r\n    handleOpen = () => {\r\n        this.props.openTxModal();\r\n        this.props.loadFlowParams([]);\r\n    }\r\n\r\n  \r\n\r\n    handleFlowSelection = (event) => {\r\n        for(var i=0; i<this.props.registeredFlows.length;i++){\r\n            const flow = this.props.registeredFlows[i];\r\n            if(flow.flowName === event.target.value){\r\n                this.props.loadFlowParams(flow.flowParamsMap.Constructor_1);\r\n                this.setState({\r\n                    selectedFlow: {\r\n                        name: event.target.value,\r\n                        constructors: flow.flowParamsMap,\r\n                        activeConstructor: 'Constructor_1'\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n        this.props.setFlowSelectionFlag();\r\n    }\r\n\r\n    handleFlowConstructorSelection = (event) => {   \r\n        this.props.loadFlowParams(this.state.selectedFlow.constructors[event.target.value]);\r\n        this.setState({\r\n            selectedFlow: {\r\n                name: this.state.selectedFlow.name,\r\n                constructors: this.state.selectedFlow.constructors,\r\n                activeConstructor: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    updateState = (index,value) => {\r\n        const ParamValues = [...this.state.paramList]; //make a copy of array\r\n        ParamValues[index] = value;\r\n        this.setState({ paramList: ParamValues });\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        console.log(newPage,'newPage')\r\n        this.setState({\r\n            page: {\r\n                pageSize: 8,\r\n                offset: newPage\r\n            },\r\n            trnxDetail: []\r\n        }, this.loadNewPage);\r\n        \r\n    }\r\n\r\n    loadNewPage = () => {\r\n        this.props.fetchTrnxList(this.state.page);\r\n    }\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        this.setState({\r\n            page: {\r\n                pageSize: event.target.value,\r\n                offset: 0\r\n            },\r\n            trnxDetail: []\r\n        }, this.loadNewPage);\r\n    }\r\n\r\n    prepareFlowDataToStart = () => {\r\n        this.props.inFlightFLow(true);\r\n        this.setState({\r\n            flowInfo: {\r\n                flowName: this.state.selectedFlow.name,\r\n                flowParams: this.props.flowParams\r\n            },\r\n        }, () => this.props.startFlow(this.state.flowInfo), this.props.fetchTrnxList(this.state.page));\r\n    }\r\n    \r\n\r\n    showTrnxDetails = (trnx, index) => {\r\n        let txDetail = this.state.trnxDetail;\r\n        txDetail[index] = !this.state.trnxDetail[index]\r\n        this.setState({\r\n            trnxDetail: txDetail,\r\n            isOpen:true\r\n        });\r\n    }\r\n\r\n    renderJson = (jsonObj, lvl) => {\r\n        return(\r\n            Object.keys(jsonObj).map((key, index) => {\r\n                return (\r\n                    jsonObj[key] ?\r\n                        <div key={index} className={`${lvl === 0?\"item-block\":\"\"}` }>\r\n                        {lvl === 0?\r\n                        <span className=\"label\">{key}: &nbsp;</span>\r\n                        :\r\n                        <span className=\"sub-label\">{key}: &nbsp;</span>\r\n                        }\r\n\r\n                        {typeof jsonObj[key] === 'object'?\r\n                            this.renderJson(jsonObj[key], lvl+1)\r\n                        :\r\n                        jsonObj[key]}\r\n                    </div>:null\r\n                )\r\n            }) \r\n        )\r\n    }\r\n\r\n    renderParamForm(innerForm, paramList, title, deep, delIdx, param, key){\r\n        return(\r\n            <React.Fragment>\r\n            {\r\n                innerForm? \r\n                    <div className=\"inner-form\" key={key}>\r\n                        {\r\n                            delIdx>=0?<div className=\"inner-form-close\" onClick={()=> this.updateCmplxListParam(param, false, delIdx)}>X</div>:null\r\n                        }\r\n                   \r\n                            <div className=\"custom-form-header\"><h6>{title}</h6></div>\r\n                            {\r\n                                paramList.map((param, index) => this.renderInnerForm(param, index, true))\r\n                            }\r\n                     \r\n                    </div>\r\n                :\r\n                this.props.flowParams?this.props.flowParams.map((param, index) => this.renderInnerForm(param, index, false)):null\r\n            }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    renderInnerForm(param, index, deep){\r\n        return(\r\n            param.flowParams && param.flowParams.length > 1 && !(param.hasParameterizedType && (param.paramType === 'java.util.List' || param.paramType === 'java.util.Set'))? \r\n                this.renderParamForm(true, param.flowParams, param.paramName, deep)\r\n            : // List of complex object\r\n            param.flowParams && param.flowParams.length > 1 && (param.hasParameterizedType && (param.paramType === 'java.util.List' || param.paramType === 'java.util.Set'))? \r\n                <React.Fragment>\r\n                    {/* {\r\n                        this.renderParamForm(true, param.paramValue[0].params, param.paramName, deep, -1, param, -1)\r\n                    }\r\n                    {\r\n                        this.state.paramList[param.paramName]?\r\n                        this.state.paramList[param.paramName].map((value, idx) => {\r\n                            return this.renderParamForm(true, value.params, param.paramName, deep, idx, param, value.key)\r\n                        }):null\r\n                    }\r\n                    <div style={{cursor: \"pointer\"}} onClick={()=> this.updateCmplxListParam(param, true)}>Add</div> */}\r\n                    <div key={index} style={{color: 'red', marginTop: 10}}>List of Complex Object is not supported</div>\r\n                </React.Fragment>\r\n            :\r\n            <React.Fragment>   \r\n            <div key={index} className=\"form-field\">\r\n                {\r\n                param.paramType === 'net.corda.core.identity.Party'?\r\n         \r\n                        <FormGroup fullWidth>\r\n                            \r\n                                <Select label={param.paramName} onChange={e => {param.paramValue = e.target.value}} autoWidth  helpText=\"Select Party\">\r\n                                    {\r\n                                        this.props.parties.map((party, index) => {\r\n                                            return(\r\n                                                <Option key={index} value={party}>{party}</Option>\r\n                                            );\r\n                                        })\r\n                                    }\r\n                                </Select>                              \r\n                            </FormGroup>\r\n        \r\n                :\r\n                param.paramType === 'java.time.LocalDateTime' || param.paramType === 'java.time.Instant'?\r\n                \r\n                        <TextField type=\"datetime-local\" onChange={e=> {param.paramValue = e.target.value}} className=\"custom-input date-picker-custom\" label={param.paramName}\r\n                        helpText={this.getHelperText(param.paramType)} fullWidth/> \r\n                   \r\n                :\r\n                param.paramType === 'java.time.LocalDate'?\r\n                  <React.Fragment>\r\n                        <TextField type=\"date\" className=\"custom-input\"  onBlur={e=> {param.paramValue = e.target.value}} label={param.paramName} InputLabelProps={{ shrink: true }} fullWidth/> \r\n                            <IconCustom\r\n                                    icon=\"InformationVariant\"\r\n                                    className=\"h-4 inline ml-4 -mt-2 text-medium-light-gray custom-info\"\r\n                                />\r\n                </React.Fragment>\r\n                :\r\n                param.hasParameterizedType && (param.paramType === 'java.util.List' || param.paramType === 'java.util.Set') ?\r\n                    this.renderListParam(param, index)\r\n                :\r\n                 <div className=\"custom-field-icon\">\r\n                            <TextField className=\"custom-field\"  variant=\"outlined\" onChange={e=> {param.paramValue = e.target.value}} label={param.paramName} helperText={this.getHelperText(param.paramType)} fullWidth />\r\n                                  <IconCustom\r\n                                    icon=\"InformationVariant\"\r\n                                    className=\"h-4 inline ml-4 -mt-2 text-medium-light-gray custom-info\"\r\n                                />\r\n                                                </div>\r\n\r\n                   \r\n                }\r\n            </div> \r\n        \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    renderListParam(param, index){\r\n        return (\r\n            <div key={index} className=\"form-input\">\r\n                {\r\n                    param.parameterizedType === 'net.corda.core.identity.Party'?\r\n                        <React.Fragment>\r\n                            \r\n                                <Select key={index} label={param.paramName} onChange={e => this.updateListParam(param, e.target.value, true)} autoWidth>\r\n                                    {\r\n                                        this.props.parties.map((party, index) => {\r\n                                            return(\r\n                                                <Option key={index} value={party}>{party}</Option>\r\n                                            );\r\n                                        })\r\n                                    }\r\n                            </Select>\r\n                            <br></br>\r\n                                 <div className=\"custom-form-header\"><h6>Select Parties</h6></div>\r\n                         \r\n                            {\r\n                                this.state.paramList[param.paramName]?\r\n                                this.state.paramList[param.paramName].map((value, idx) => {\r\n                                        return (<div key={idx} className=\"list-selection\">{value}<span onClick={()=>this.updateListParam(param, \"\", false, idx)}>X</span></div>)\r\n                                    })\r\n                                :null\r\n                            }\r\n                        </React.Fragment>\r\n                    : param.parameterizedType === 'java.time.LocalDateTime' || param.parameterizedType === 'java.time.Instant'?\r\n                        <React.Fragment>\r\n                                <TextField className=\"date-picker-custom\" type=\"datetime-local\" onBlur={e => this.updateListParam(param, e.target.value, true)} label={param.paramName} InputLabelProps={{ shrink: true }} \r\n                                helpText={this.getHelperText(param.paramType)} fullWidth/> \r\n                            {\r\n                                this.state.paramList[param.paramName]?\r\n                                this.state.paramList[param.paramName].map((value, idx) => {\r\n                                        return (<div key={idx} className=\"list-selection\">{value}<span onClick={()=>this.updateListParam(param, \"\", false, idx)}>X</span></div>)\r\n                                    })\r\n                                :null\r\n                            }\r\n                        </React.Fragment>    \r\n                    :\r\n                    param.parameterizedType === 'java.time.LocalDate'?\r\n                        <React.Fragment>\r\n                 \r\n                                <TextField type=\"date\" onBlur={e => this.updateListParam(param, e.target.value, true)} label={param.paramName} InputLabelProps={{ shrink: true }} fullWidth/> \r\n                   \r\n                            {\r\n                                this.state.paramList[param.paramName]?\r\n                                this.state.paramList[param.paramName].map((value, idx) => {\r\n                                        return (<div key={idx} className=\"list-selection\">{value}<span onClick={()=>this.updateListParam(param, \"\", false, idx)}>X</span></div>)\r\n                                    })\r\n                                :null\r\n                            }\r\n                        </React.Fragment>\r\n                    :\r\n                    param.hasParameterizedType && (param.paramType === 'java.util.List' || param.paramType === 'java.util.Set') ?\r\n                        <div style={{color: 'red', marginTop: 10}}>Nested List Param is not supported!</div>\r\n                    :\r\n                        <React.Fragment>\r\n                               <TextField onBlur={e => this.updateListParam(param, e.target.value, true)} label={param.paramName} helpText={this.getHelperText(param.paramType)} fullWidth/> \r\n                            {\r\n                                this.state.paramList[param.paramName]?\r\n                                this.state.paramList[param.paramName].map((value, idx) => {\r\n                                        return (<div key={idx} className=\"list-selection\">{value}<span onClick={()=>this.updateListParam(param, \"\", false, idx)}>X</span></div>)\r\n                                    })\r\n                                :null\r\n                            }\r\n                        </React.Fragment>\r\n                    }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // updateCmplxListParam(param, flag, idx){\r\n    //     if(flag){\r\n    //         let obj = JSON.parse(JSON.stringify(param.paramValue[0]));\r\n    //         param.paramValue.push(obj);\r\n\r\n    //         let keyVal = [];\r\n    //         if(!(this.state.paramList[param.paramName] === undefined || this.state.paramList[param.paramName] === null)){\r\n    //             keyVal[param.paramName] = this.state.paramList[param.paramName];\r\n    //         }else{\r\n    //             keyVal[param.paramName] = [];\r\n    //         }\r\n    //         if(keyVal[param.paramName].length === 0){\r\n    //             obj.key = 0;\r\n    //         }else{\r\n    //             obj.key = keyVal[param.paramName][keyVal[param.paramName].length -1].key + 1;\r\n    //         }\r\n    //         keyVal[param.paramName].push(obj);\r\n    //         this.setState({\r\n    //             paramList: keyVal\r\n    //         });\r\n    //     }else{\r\n    //         param.paramValue.splice(idx+1, 1);\r\n    //         this.state.paramList[param.paramName].splice(idx, 1);\r\n    //         let keyVal = [];\r\n    //         keyVal[param.paramName] = this.state.paramList[param.paramName];\r\n    //         this.setState({\r\n    //             paramList: keyVal\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n\r\n    updateListParam(param, val, flag, idx) {\r\n        if(flag){\r\n            if(param.paramValue === undefined || param.paramValue === null)\r\n                param.paramValue = []\r\n            \r\n                param.paramValue.push(val);\r\n                let keyVal = [];\r\n                keyVal[param.paramName] = param.paramValue;\r\n                this.setState({\r\n                    paramList: keyVal\r\n                });\r\n        }else{\r\n            param.paramValue.splice(idx, 1);\r\n            this.state.paramList[param.paramName].splice(idx, 1)\r\n            let keyVal = [];\r\n            keyVal[param.paramName] = this.state.paramList[param.paramName];\r\n            this.setState({\r\n                paramList: keyVal\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    getHelperText(paramType){\r\n        switch(paramType){\r\n            case 'net.corda.core.contracts.Amount':\r\n                return 'Param Type: ' + paramType + ' eg: 100 USD';\r\n            \r\n            case 'java.lang.Boolean':\r\n            case 'boolean':\r\n                return 'Param Type: ' + paramType + ' eg: true or false';\r\n            \r\n            case 'java.time.LocalDateTime':\r\n            case 'java.time.Instant':    \r\n                return 'Param Type: ' + paramType + ' eg: 10/02/2020 10:12:30 AM';\r\n\r\n            case 'net.corda.core.utilities.OpaqueBytes':\r\n                return 'Param Type: ' + paramType + ', Enter String value';\r\n\r\n            default:\r\n                return 'Param Type: ' + paramType;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n              \r\n                <div className=\"page-title\">\r\n                    <PageHeader title=\"Transactions\" size=\"small\" className=\"custom-node-explorer-header\" >\r\n                        Transactions\r\n                    </PageHeader>                  \r\n                    <Drawer\r\n                        open={this.props.open}\r\n                        onClose={this.handleClose}\r\n                        style={{ overflow: \"scroll\" }}\r\n                        position=\"right\"\r\n                        // closeOnOutsideClick\r\n                        \r\n                        >\r\n                        <div className=\"flow-form\">\r\n                              \r\n                                            {/* {\r\n                                            this.props.flowResultMsg ?\r\n                                                <SnackbarComponent  variant={this.props.flowResultMsgType?\"success\":\"danger\"} \r\n                                                message={this.props.flowResultMsgType? `Flow Successful :` : `Flow Errored : ${this.props.flowResultMsg}` }/>                                        \r\n                                                :null\r\n                                            } */}\r\n                              \r\n                            <h3 id=\"simple-modal-title\" className=\"flow-form-title\">Select a Flow to Execute</h3>\r\n                            <div style={{color: \"red\"}}>{this.props.registeredFlows.length === 0? 'No Flows Found! Make sure you have the cordapp directory set in the Settings Tab':null}</div>\r\n                            <div className=\"form-body\">\r\n                                                      \r\n                                            <Select label=\"Select A Flow to Execute\" onChange={this.handleFlowSelection}  >\r\n                                                <Option key=\"empty\" value=\"\"></Option>\r\n                                            {\r\n                                                    this.props.registeredFlows.map((flow, index) => {\r\n                                                        return(\r\n                                                            <Option key={index} value={flow.flowName}>{flow.flowName}</Option>\r\n                                                        );\r\n                                                    })\r\n                                                }\r\n                                            </Select>\r\n                                            <div style={{color: \"red\"}}>{this.state.selectedFlow.constructors && Object.keys(this.state.selectedFlow.constructors).length===0? 'No constructors with supported parameters found':null}</div>\r\n                            \r\n                            </div>\r\n\r\n                            <div className=\"form-body\">\r\n                                  {   \r\n                                    this.state.selectedFlow.constructors && Object.keys(this.state.selectedFlow.constructors).length>0?\r\n                                                <Select label=\"Select A Constructor Type\" id=\"flow-cons-select-label\" onChange={this.handleFlowConstructorSelection} \r\n                                                value={this.state.selectedFlow.activeConstructor} fullWidth helpText=\"Select A Constructor Type\">\r\n                                                    {\r\n                                                        Object.keys(this.state.selectedFlow.constructors).map((constructor, index) => {\r\n                                                            return(\r\n                                                                <Option key={index} value={constructor}>{constructor}</Option>\r\n                                                            );\r\n                                                        })\r\n                                                    }\r\n                                                </Select>\r\n                                       \r\n                                      :null\r\n                                }\r\n                                {\r\n                                    this.renderParamForm(false)\r\n                                }\r\n                                 \r\n                                                                  \r\n                                   \r\n                                {\r\n                                    this.props.flowSelected && Object.keys(this.state.selectedFlow.constructors).length>0?\r\n                                            <Button onClick={() => this.prepareFlowDataToStart()} style={{float: \"right\", marginTop: 10}} \r\n                                                    variant=\"primary\" size=\"small\" disabled={this.props.flowInFlight}>\r\n                                                {this.props.flowInFlight?'Please Wait...':'Execute'}\r\n                                            </Button>\r\n                                    :null\r\n                                }\r\n                               \r\n                                </div>\r\n                            </div>\r\n                        </Drawer>\r\n                </div>\r\n                <Button className=\"transaction-btn\" variant=\"primary\" iconRight=\"Plus\" size=\"small\" onClick={this.handleOpen}>New Transaction</Button>\r\n\r\n                <div>\r\n                <div className=\"transactions-container\">\r\n                            {\r\n                                this.props.transactionList && this.props.transactionList.length > 0 ?\r\n                                this.props.transactionList.map((trnx, index) => {\r\n                                    return (\r\n                                        <React.Fragment key={index}>\r\n                                            <div key={index} style={{cursor: \"pointer\"}} onClick={() => this.showTrnxDetails(trnx, index)}\r\n                                                className={`transaction-tile-container`}>\r\n                                              \r\n                                                <div className=\"tile-header\">\r\n                                                    <div className=\"label\">Transaction ID</div>\r\n                                                    <span className=\"label-data\">\r\n                                                        {trnx.transactionId}\r\n                                                    </span>\r\n                                                    \r\n                                                </div>\r\n                                                <Row className=\"tile-body\">\r\n                                                    <Column lg={6}>\r\n                                                        <div className=\"tile-features\">\r\n                                                            <div className=\"label\">Input</div>\r\n                                                            <span className=\"label-data\">\r\n                                                            {trnx.inputTypes? trnx.inputTypes.map((typeCnt, index) => {\r\n                                                            return ( <div key={index}> {typeCnt.type + \"(\" + typeCnt.count + \")\" }</div>);\r\n                                                        }) :\"-\"}\r\n                                                        </span>             \r\n                                                    </div>                                           \r\n                                                    </Column>\r\n                                                    <Column lg={6}>\r\n                                                        <div className=\"tile-features\">\r\n                                                            <div className=\"label\">Output</div>\r\n                                                                <span className=\"label-data\">\r\n                                                                {trnx.outputTypes && trnx.outputTypes.length > 0 ? trnx.outputTypes.map((typeCnt, index) => {\r\n                                                                return ( <div key={index}> {typeCnt.type + \"(\" + typeCnt.count + \")\" }</div>);\r\n                                                            }) :\"-\"}\r\n                                                                </span>\r\n                                                        </div>                                                    \r\n                                                    </Column>                                                                                                        \r\n                                                </Row>\r\n                                                 <div className=\"tile-footer\">\r\n                                                    <span className=\"label\">Command:</span>\r\n                                                    <span className=\"label-data-command\">\r\n                                                        {trnx.commands.map( (command, index) => {\r\n                                                            return (<div key={index}>{command}</div>)\r\n                                                        }\r\n                                                    )}\r\n                                                    </span>                                                    \r\n                                                </div>                                             \r\n                                            </div>\r\n                                            {\r\n                                               \r\n                                                <Drawer open={this.state.trnxDetail[index]? true : false}\r\n                                                    position=\"right\"\r\n                                                    onClose={() => this.setState({ isOpen: false, trnxDetail:[] })}\r\n                                                    closeOnOutsideClick\r\n                                                    className=\"w-half\"\r\n                                                >\r\n                                           \r\n                                                    <div>\r\n                                                        <Container spacing={0}>\r\n                                                            <Column xs={5}>\r\n                                                                <Card className=\"wrapper\" title=\"Inputs\">\r\n                                                                    {\r\n                                                                        trnx.inputs?\r\n                                                                        trnx.inputs.map((input, idx) => {\r\n                                                                            return (\r\n                                                                                <div key={idx} className=\"content\">\r\n                                                                                    <div className=\"stitle\">\r\n                                                                                        <div className=\"break-word\">{input.type}</div>\r\n                                                                                        <div className=\"break-word\" style={{fontWeight: \"normal\", fontSize: 13}}>{input.stateRef.txhash} ({input.stateRef.index})</div>\r\n                                                                                    </div>\r\n                                                                                    {this.renderJson(input.state, 0)}\r\n                                                                                </div>\r\n                                                                            )\r\n                                                                        }):\r\n                                                                            <div className=\"content stripe\"></div>\r\n                                                                    }\r\n                                                                </Card>\r\n                                                            </Column>\r\n                                                            <Column item xs={2}>\r\n                                                                <div className=\"cmd-wrapper\">\r\n                                                                    <ForwardIcon className='icon-arrow' style={{color: \"#DE0A1B\", fontSize: 120}}></ForwardIcon>\r\n                                                                    <div style={{position: \"relative\", top: -15}}>\r\n                                                                        {trnx.commands.map( (command , index) => {\r\n                                                                                return (<div key={index}>{command}</div>)\r\n                                                                                }\r\n                                                                            )\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </Column>\r\n                                                            <Column item xs={5}>\r\n                                                            <Card className=\"wrapper\" title=\"Outputs\">                                                                \r\n                                                                {\r\n                                                                    trnx.outputs && trnx.outputs.length > 0?\r\n                                                                    trnx.outputs.map((output, idx) => {\r\n                                                                        return (\r\n                                                                            <div key={idx} className=\"content\">\r\n                                                                                <div className=\"stitle\">\r\n                                                                                    <div className=\"break-word\">{output.type}</div>\r\n                                                                                    <div className=\"break-word\" style={{fontWeight: \"normal\", fontSize: 13}}>{output.stateRef.txhash} ({output.stateRef.index})</div>\r\n                                                                                </div>\r\n                                                                                {this.renderJson(output.state, 0)}\r\n                                                                            </div>    \r\n                                                                        )\r\n                                                                    }):<div className=\"content stripe\"></div>\r\n                                                                }\r\n                                                            </Card>\r\n                                                            </Column>\r\n                                                            <Column item xs={12}>\r\n                                                            <Card className=\"wrapper\" title=\"Signatures\" style={{marginTop: 20, minWidth: \"auto\", height: \"auto\"}}>\r\n                                                            \r\n                                                                    {\r\n                                                                        trnx.signers && trnx.signers.length > 0?\r\n                                                                        trnx.signers.map((sig, idx) => {\r\n                                                                            return (\r\n                                                                                <div className=\"signature-label\" key={idx}>{sig.signature.bytes}<strong>({sig.partyName})</strong></div>\r\n                                                                            )\r\n                                                                        })\r\n                                                                        :\r\n                                                                        <div>Transaction has no signatures</div>\r\n                                                                    }\r\n                                                            \r\n                                                            </Card>\r\n                                                            </Column>\r\n                                                        </Container>\r\n                                                        \r\n                                                    </div>\r\n                                             \r\n                                                </Drawer>\r\n                                           \r\n                                            }\r\n                                        </React.Fragment>\r\n                                    );\r\n                                })\r\n                                : \r\n                                    \r\n                                    <div className=\"no-data-found position\">\r\n                                        <DashboardItem color=\"#333\" icon=\"AstronautSittingOnPlanet\">\r\n                                            No Transactions Found\r\n                                        </DashboardItem>\r\n                                    </div>\r\n                                                                                              \r\n                            }\r\n                            </div>\r\n         \r\n                    {\r\n                    this.props.totalRecords?\r\n                       <TablePagination\r\n                        rowsPerPageOptions={[-1]}\r\n                        component=\"div\"\r\n                        count={this.props.totalRecords}\r\n                        rowsPerPage={this.state.page.pageSize}\r\n                        page={this.state.page.offset}\r\n                        onPageChange={this.handleChangePage}\r\n                        onRowsPerPageChange={this.handleChangeRowsPerPage}\r\n                            />\r\n                        :null\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        registeredFlows: state.trnx.registeredFlows,\r\n        flowParams: state.trnx.flowParams,\r\n        transactionList: state.trnx.trnxList,\r\n        totalRecords: state.trnx.trnxListPage,\r\n        parties: state.trnx.parties,\r\n        open: state.trnx.showTxPopup,\r\n        flowSelected: state.trnx.isFlowSelected,\r\n        flowInFlight: state.trnx.isFlowInFlight,\r\n        flowResultMsg: state.trnx.flowMessage,\r\n        flowResultMsgType: state.trnx.messageType\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchTrnxList: (page) => dispatch(ActionType.fetchTransactions(page)),\r\n        startFlow: (flowInfo) => dispatch(ActionType.startFlow(flowInfo)),\r\n        fetchFlowList: () => dispatch(ActionType.fetchFlows()),\r\n        fetchParties: () => dispatch(ActionType.fetchParties()),\r\n        loadFlowParams: (data) => dispatch({type: ActionType.LOAD_FLOW_PARAMS, data: data}),\r\n        closeTxModal: () => dispatch({type: ActionType.CLOSE_TX_MODAL}),\r\n        openTxModal: () => dispatch({type: ActionType.OPEN_TX_MODAL}),\r\n        setFlowSelectionFlag: () => dispatch({type: ActionType.SET_FLOW_SELECTION_FLAG}),\r\n        inFlightFLow: (flag) => dispatch({type: ActionType.SET_INFLIGHT_FLOW_FLAG, data: flag})\r\n\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionExplorer);","export default __webpack_public_path__ + \"static/media/crda-logo.4f0b50a7.svg\";","import React from 'react';\r\nimport '../styles/Header.scss';\r\nimport { TopNavBar, Dropdown, IconCustom, Option } from 'r3-tooling-design-system';\r\nimport * as ActionType from '../store/Actions'\r\nimport { connect } from 'react-redux';\r\nimport logoSrc from '../crda-logo.svg';\r\n\r\n\r\nconst Header = (props) => {\r\n\r\n  const logo = (\r\n    <a href=\"#\">\r\n      <img src={logoSrc} alt=\"logo-alt-txt\" width=\"100px\" />\r\n    </a>\r\n  );\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n\r\n  \r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n      if (prevOpen.current === true && open === false) {\r\n        anchorRef.current.focus();\r\n      }\r\n\r\n      prevOpen.current = open;\r\n    }, [open]);\r\n  \r\n  return (\r\n    <TopNavBar\r\n      logo={logo}\r\n      center={\r\n        <>\r\n          <span style={{ display: \"block\", paddingBottom: 3 }}>{props.profile.name}</span>\r\n          <Dropdown closeOnSelectOption positionX=\"right\" positionY=\"bottom\" trigger={<IconCustom className=\"h-5\" icon=\"Account\" />}>\r\n            <Option disabled value=\"one\">\r\n              <span style={{ display: \"block\", paddingBottom: 3 }}>{props.profile.name}</span>\r\n              <span style={{ fontSize: 12, display: \"block\" }}>{props.profile.city}, {props.profile.country}</span>\r\n            </Option>\r\n           \r\n          </Dropdown>\r\n          <IconCustom className=\"h-5\" icon=\"ExitToApp\"  onClick={props.onLogout} />\r\n        </>}\r\n/>\r\n      // <div className=\"Header\">\r\n      //     <div>\r\n      //           <img src=\"crda-logo.svg\" width=\"100%\" alt=\"Corda Logo\" className=\"Logo\"/>\r\n      //           <div className=\"profile\">\r\n      //             <Button variant=\"outlined\" ref={anchorRef} onClick={handleToggle}>{props.profile.name}</Button>\r\n      //             <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n      //                 {({ TransitionProps, placement }) => (\r\n      //                   <Grow\r\n      //                     {...TransitionProps}\r\n      //                     style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n      //                   >\r\n      //                     <Paper>\r\n      //                       <div style={{padding: 10}}>\r\n      //                           <span style={{display: \"block\", paddingBottom: 3}}>{props.profile.name}</span>\r\n      //                           <span style={{fontSize: 12, display: \"block\"}}>{props.profile.city}, {props.profile.country}</span>\r\n      //                       </div>\r\n      //                       <hr style={{margin: 0}}/>\r\n      //                       <ClickAwayListener onClickAway={handleClose}>\r\n      //                         <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown} style={{padding: 0}}>\r\n      //                           <MenuItem onClick={props.onLogout}>Logout</MenuItem>\r\n      //                         </MenuList>\r\n      //                       </ClickAwayListener>\r\n      //                     </Paper>\r\n      //                   </Grow>\r\n      //                 )}\r\n      //               </Popper>\r\n      //           </div>\r\n      //     </div>\r\n      // </div>\r\n    \r\n  \r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    profile: state.common.profile\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n      onLogout: () => dispatch({type: ActionType.LOGOUT}),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React from 'react';\r\n\r\nconst splashScreen = () => {\r\n\r\n    return(\r\n        <div className=\"splash\">\r\n            <img src=\"crda-logo.svg\" alt=\"Corda Logo\" width=\"550px\" style={{marginTop: \"-50px\"}}></img>\r\n            <div style={{color: \"#DF0A1B\", fontWeight: \"bold\", marginTop: 20}}>Initializing... Please Wait...</div>\r\n        </div>    \r\n    );\r\n} \r\n\r\nexport default splashScreen;","import React, { Component } from 'react';\r\nimport '../styles/Login.scss';\r\nimport * as ActionType from '../store/Actions';\r\nimport { connect } from 'react-redux';\r\nimport SplashScreen from '../components/Splash';\r\nimport { Container, Column, Row, Button, TextInput, PasswordInput, IconCustom } from 'r3-tooling-design-system'\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n      hostName: \"\",\r\n      port: \"\",\r\n      username: \"\",\r\n      password: \"\",\r\n\r\n        ssh: {\r\n            //hostName: \"\",\r\n            port: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n        },\r\n        sshChecked: false,\r\n      touched: {\r\n        hostName: false,\r\n        port: false,\r\n        username: false,\r\n        password: false,\r\n          //sshHostName: false,\r\n          sshPort: false,\r\n          sshUsername: false,\r\n          sshPassword: false,\r\n      },\r\n    };\r\n\r\n    handleBlur = field => evt => {\r\n      this.setState({\r\n        touched: { ...this.state.touched, [field]: true }\r\n      });\r\n    };\r\n\r\n    validate = () => {\r\n        if (!this.state.sshChecked) {\r\n            return {\r\n                hostName: this.state.hostName.length === 0,\r\n                port: this.state.port.length === 0,\r\n                username: this.state.username.length === 0,\r\n                password: this.state.password.length === 0\r\n            };\r\n        } else {\r\n            return {\r\n                hostName: this.state.hostName.length === 0,\r\n                port: this.state.port.length === 0,\r\n                username: this.state.username.length === 0,\r\n                password: this.state.password.length === 0,\r\n                //sshHostName: this.state.ssh.hostName.length === 0,\r\n                sshPort: this.state.ssh.port.length === 0,\r\n                sshUsername: this.state.ssh.username.length === 0,\r\n                sshPassword: this.state.ssh.password.length === 0\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBlur = field => evt => {\r\n      this.setState({\r\n        touched: { ...this.state.touched, [field]: true }\r\n      });\r\n    };\r\n\r\n    shouldMarkError = field => {\r\n      let errors = this.validate();\r\n      const hasError = errors[field];\r\n      const shouldShow = this.state.touched[field];\r\n\r\n      return hasError ? shouldShow : false;\r\n    };\r\n\r\n    doLogin = () => {\r\n      const errors = this.validate();\r\n      const hasErrors = Object.keys(errors).some(x => errors[x]);\r\n      if(!hasErrors){\r\n        let data = {...this.state};\r\n        delete data.touched;\r\n        delete data.sshChecked;\r\n        if (!this.state.sshChecked) delete data.ssh;\r\n        this.props.onLoginAction(data);\r\n      }\r\n    }\r\n\r\n    render() {\r\n\r\n        const errors = this.validate();\r\n        const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n\r\n        const sshCredentials = () => {\r\n            // user, password/key, host, port\r\n                return (\r\n        <React.Fragment>\r\n                        {/*<Grid item xs={6}>*/}\r\n                        {/*    <TextInput label=\"ssh Hostname\" value={this.state.ssh.hostName}*/}\r\n                        {/*               onChange={e => this.setState({ssh: {...this.state.ssh, hostName: e.target.value}})}*/}\r\n                        {/*               error={this.shouldMarkError(\"sshHostName\")}*/}\r\n                        {/*               helperText={this.shouldMarkError(\"sshHostName\") ? 'Please Enter ssh Hostname' : ''}*/}\r\n                        {/*               onBlur={this.handleBlur(\"sshHostName\")}/>*/}\r\n                            {/*</Grid>*/}\r\n                        <Row>\r\n                        <Column lg={4}>\r\n                            <TextInput label=\"SSH Port\" type=\"number\" value={this.state.ssh.port}\r\n                                       onChange={e => this.setState({ssh: {...this.state.ssh, port: e.target.value}})}\r\n                                       errorMessage={this.shouldMarkError(\"sshPort\")}\r\n                                       helpText={this.shouldMarkError(\"sshPort\") ? 'Please Enter SSH Port Number' : ''}\r\n                                       onBlur={this.handleBlur(\"sshPort\")}/>\r\n                        </Column>                    \r\n                            <Column lg={8}>\r\n                                <TextInput label=\"SSH Username\" value={this.state.ssh.username}\r\n                                           onChange={e => this.setState({ssh: {...this.state.ssh, username: e.target.value}})}\r\n                                           errorMessage={this.shouldMarkError(\"sshUsername\")}\r\n                                           helpText={this.shouldMarkError(\"sshUsername\") ? 'Please Enter SSH Username' : ''}\r\n                                           onBlur={this.handleBlur(\"sshUsername\")}/>\r\n                            </Column>\r\n                            <Column lg={12}>\r\n                                <PasswordInput label=\"SSH Password\" type=\"password\" \r\n                                        value={this.state.ssh.password}\r\n                                           onChange={e => this.setState({ssh: {...this.state.ssh, password: e.target.value}})}\r\n                                           errorMessage={this.shouldMarkError(\"sshPassword\")}\r\n                                           helpText={this.shouldMarkError(\"sshPassword\") ? 'Please Enter SSH Password' : ''}\r\n                                           onBlur={this.handleBlur(\"sshPassword\")}/>\r\n                            </Column>\r\n                        </Row>\r\n            </React.Fragment>\r\n                )\r\n            \r\n        }\r\n\r\n        if (!this.props.isServerAwake) {\r\n            this.props.onLoadAction();\r\n            return (<SplashScreen/>)\r\n        } else {\r\n\r\n            return (\r\n                <Container fluid className=\"login-view-container\">\r\n                    <Row className=\"max-height no-gap\">\r\n                        <Column md={6} lg={5} className=\"max-height container-left\">\r\n                            <div className=\"center-container\">\r\n                                <div className=\"logo-container\">\r\n                                    <img src=\"crda-logo.svg\" alt=\"Corda Logo\" width=\"250px\"></img>\r\n                                    <div className=\"hidden-logo-text\">\r\n                                            <div className=\"screen-text\">\r\n                                            <h2>Node Explorer</h2>\r\n                                            <h4>Interact with your Nodes, Cordapps and Vault.</h4>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-title\">\r\n                                     <h2>Login</h2>\r\n                                </div>\r\n                                    <div className=\"login-form-container\">\r\n                                    <Row>\r\n                                        <Column lg={8}>\r\n                                            <TextInput label=\"Node Hostname\" value={this.state.hostName}\r\n                                                onChange={e => this.setState({hostName: e.target.value})}\r\n                                                errorMessage={this.shouldMarkError(\"hostName\")}\r\n                                                helpText={this.shouldMarkError(\"hostName\") ? 'Please Enter Node Hostname' : ''}\r\n                                                onBlur={this.handleBlur(\"hostName\")}/>\r\n                                        </Column>\r\n                                        <Column lg={4}>\r\n                                            <TextInput label=\"RPC Port\" type=\"number\" value={this.state.port}\r\n                                                onChange={e => this.setState({port: e.target.value})}\r\n                                                errorMessage={this.shouldMarkError(\"port\")}\r\n                                                helpText={this.shouldMarkError(\"port\") ? 'Please Enter Node Port Number' : ''}\r\n                                                onBlur={this.handleBlur(\"port\")}/>                                   \r\n                                        </Column>                               \r\n                                        <Column lg={12}>\r\n                                            <TextInput label=\"RPC Username\" \r\n                                                value={this.state.username}\r\n                                                onChange={e => this.setState({username: e.target.value})}\r\n                                                errorMessage={this.shouldMarkError(\"username\")}\r\n                                                helpText={this.shouldMarkError(\"username\") ? 'Please Enter RPC Username' : ''}\r\n                                                />\r\n                                        </Column>\r\n                                        <Column lg={12}>\r\n                                            <PasswordInput label=\"RPC Password\" \r\n                                                value={this.state.password}\r\n                                                onChange={e => this.setState({password: e.target.value})}\r\n                                                errorMessage={this.shouldMarkError(\"password\")}\r\n                                                helpText={this.shouldMarkError(\"password\") ? 'Please Enter RPC Password' : ''}\r\n                                                />\r\n                                        </Column>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Column lg={12}>\r\n                                            <p className=\"separator-tag\">or Login with ssh</p>\r\n                                        </Column>\r\n                                    </Row>\r\n                                    \r\n                                    {sshCredentials()}\r\n                                    <Row className=\"cta-container\">\r\n                                        <Column lg={12}>\r\n                                             <Button variant=\"primary\" width=\"100%\" type=\"submit\" onClick={this.doLogin}\r\n                                                    disabled={isDisabled || this.props.loginProcessing}>{this.props.loginProcessing? 'Please Wait...': 'Connect'}</Button>\r\n                                        </Column>\r\n                                    </Row>\r\n                                </div>      \r\n                            </div>      \r\n                        </Column>\r\n                        <Column md={6} lg={7} className=\"container-right\">\r\n                            <div className=\"blocks\">\r\n                                <div className=\"block-right\">\r\n                                    <h4>Track your CorDapps</h4>\r\n                                    <span className=\"icon-cordapp\">\r\n                                </span>\r\n                                </div>\r\n                                <div className=\"block-left\">\r\n                                    <h4>Manage your Transactions</h4>\r\n                                    <span className=\"icon-holder\">\r\n                                        <IconCustom icon=\"SwapHorizontal\" />\r\n                                </span>\r\n                                </div>\r\n                                <div className=\"screen-text\">\r\n                                <h2>Node Explorer</h2>\r\n                                <h4>Interact with your Nodes, Cordapps and Vault.</h4>\r\n                            </div>\r\n                            </div>\r\n                           \r\n                            \r\n                        </Column>                                    \r\n                    </Row>\r\n                </Container>             \r\n            );\r\n        }\r\n    }\r\n}\r\n  \r\nconst mapStateToProps = state => {\r\n    return {\r\n        isServerAwake: state.common.isServerAwake,\r\n        loginProcessing: state.common.loginProcessing\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n      onLoadAction:() => dispatch(ActionType.server_awake()),\r\n      onLoginAction:(data) => dispatch(ActionType.login(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as ActionType from '../store/Actions';\r\nimport { SideBar, SideBarItem } from 'r3-tooling-design-system';\r\nimport '../styles/SideMenu.scss';\r\n\r\nconst SideMenu = (props) => {\r\n\r\n\r\n    return (\r\n\r\n        <SideBar toggable className=\"sidebar-toggable\">\r\n            <SideBarItem\r\n          icon=\"ViewDashboard\"\r\n          active={props.currentPage === 0? \"active\":\"\"}\r\n                title={\r\n                  <span onClick={() => props.changeScreen(0)}>\r\n                   Dashboard\r\n                </span>\r\n                }\r\n        ></SideBarItem>\r\n         <SideBarItem\r\n          icon=\"Earth\"\r\n          active={props.currentPage === 1? \"active\":\"\"}\r\n                title={\r\n                  <span onClick={() => props.changeScreen(1)}>\r\n                   Networks\r\n                </span>\r\n                }\r\n              ></SideBarItem>\r\n          <SideBarItem\r\n          icon=\"SwapHorizontal\"\r\n          active={props.currentPage === 2? \"active\":\"\"}\r\n                title={\r\n                  <span  onClick={() => props.changeScreen(2)}>\r\n                  Transactions\r\n                </span>\r\n                }\r\n        ></SideBarItem>\r\n        <SideBarItem\r\n              icon=\"SafeSquareOutline\"\r\n              active={props.currentPage === 3? \"active\":\"\"}\r\n                title={\r\n                  <span onClick={() => props.changeScreen(3)}>\r\n             Vault\r\n                </span>\r\n                }\r\n        ></SideBarItem>\r\n         <SideBarItem\r\n              icon=\"CogOutline\"\r\n              active={props.currentPage === 4? \"active\":\"\"}\r\n                title={\r\n                   <span onClick={() => props.changeScreen(4)}>\r\n                   Settings\r\n                </span>\r\n                }\r\n              ></SideBarItem>\r\n      </SideBar>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentPage: state.common.currentPage\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeScreen: (page) => dispatch({type: ActionType.CHANGE_SCREEN, page: page}),\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideMenu);","import React, { Component } from 'react';\r\nimport '../styles/Vault.scss';\r\nimport { Checkbox, FormControlLabel, Grid } from '@material-ui/core';\r\n\r\nclass Filter extends Component{\r\n\r\n    state = {\r\n        page: {\r\n            stateType: false,\r\n            notary: false,\r\n            status: false,\r\n            relevancy: false,\r\n            party: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    handleScroll = () => {\r\n        const winScroll = document.body.scrollTop || document.documentElement.scrollTop\r\n            if(winScroll>50){\r\n                this.refs.filterPane.style.top= (winScroll-50) + \"px\";\r\n            }else{\r\n                this.refs.filterPane.style.top= \"0px\";\r\n            }\r\n    }\r\n\r\n    handleStateTypeUpdate(value, event){\r\n        this.props.handler('stateType',  value, event.target.checked);\r\n    }\r\n\r\n    handleStatusUpdate(value, event){\r\n        this.props.handler('status',  value, event.target.checked);\r\n    }\r\n\r\n    handleRelevancyUpdate(value, event){\r\n        this.props.handler('relevancy',  value, event.target.checked);\r\n    }\r\n\r\n    handleNotaryUpdate(value, event){\r\n        this.props.handler('notary',  value, event.target.checked);\r\n    }\r\n\r\n    handlePartiesUpdate(value, event){\r\n        this.props.handler('party',  value, event.target.checked);\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"filter-container\" ref=\"filterPane\">\r\n                    {this.props.filter && Object.keys(this.props.filter.stateTypes).length > 0?\r\n                    <div className=\"filter-group\">\r\n                        <div className=\"filter-title\">Contract State</div>\r\n                        <div style={{padding: \"0 10px\", minHeight: 40}}>\r\n                            <Grid container spacing={0}>\r\n                                {\r\n                                    this.props.filter?\r\n                                    Object.keys(this.props.filter.stateTypes).map((key, index) => {\r\n                                        return(\r\n                                            <Grid key={index} item xs={12}>\r\n                                                <FormControlLabel label={key} \r\n                                                    control={ <Checkbox checked={this.state.stateType} \r\n                                                    onChange={(event) => this.handleStateTypeUpdate(this.props.filter.stateTypes[key], event)} \r\n                                                    value={this.props.filter.stateTypes[key]} color=\"primary\" size=\"small\" />}\r\n                                                />\r\n                                            </Grid>\r\n                                        )\r\n                                    }): null\r\n                                }\r\n                                   \r\n                            </Grid>\r\n                        </div>\r\n                    </div>:null\r\n                    }\r\n                    <div className=\"filter-group\">\r\n                        <div className=\"filter-title\">Status</div>\r\n                        <div style={{padding: \"4px 10px\", minHeight: 40}}>\r\n                            <Grid container spacing={0}>\r\n                                {\r\n                                    this.props.filter?\r\n                                    Object.keys(this.props.filter.status).map((key) => {\r\n                                        return(\r\n                                            <Grid item xs={6}>\r\n                                                <FormControlLabel label={key} \r\n                                                    control={ <Checkbox checked={this.state.status} \r\n                                                    onChange={(event) => this.handleStatusUpdate(this.props.filter.status[key], event)} \r\n                                                    value={this.props.filter.status[key]} color=\"primary\" size=\"small\"/>}\r\n                                                />\r\n                                            </Grid>  \r\n                                        )\r\n                                    }):null\r\n                                }  \r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"filter-group\">\r\n                        <div className=\"filter-title\">Relevancy Status</div>\r\n                        <div style={{padding: \"4px 10px\", minHeight: 40}}>\r\n                            <Grid container spacing={0}>\r\n                                    {\r\n                                        this.props.filter?\r\n                                        Object.keys(this.props.filter.relevancy).map((key) => {\r\n                                            return(\r\n                                                <Grid item xs={6}>\r\n                                                    <FormControlLabel label={key} \r\n                                                        control={ <Checkbox checked={this.state.relevancy} \r\n                                                        onChange={(event) => this.handleRelevancyUpdate(this.props.filter.relevancy[key], event)} \r\n                                                        value={this.props.filter.relevancy[key]}  color=\"primary\" size=\"small\"/>}\r\n                                                    />\r\n                                                </Grid> \r\n                                            )\r\n                                        }):null\r\n                                    }     \r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"filter-group\">\r\n                        <div className=\"filter-title\">Parties</div>\r\n                        <div style={{padding: \"0 10px\", minHeight: 40}}>\r\n                            <Grid container spacing={0}>\r\n                                {\r\n                                    this.props.filter?\r\n                                    Object.keys(this.props.filter.parties).map((key) => {\r\n                                        return(\r\n                                            <Grid item xs={12}>\r\n                                                <FormControlLabel label={this.props.filter.parties[key]} \r\n                                                    control={ <Checkbox checked={this.state.party} \r\n                                                    onChange={(event) => this.handlePartiesUpdate(this.props.filter.parties[key], event)}\r\n                                                    value={this.props.filter.parties[key]} color=\"primary\" size=\"small\"/>}\r\n                                                />\r\n                                            </Grid>\r\n                                        )\r\n                                    }):null\r\n                                }   \r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"filter-group\">\r\n                        <div className=\"filter-title\">Notary</div>\r\n                        <div style={{padding: \"0 10px\"}}>\r\n                            <Grid container spacing={0}>\r\n                                {\r\n                                    this.props.filter?\r\n                                    Object.keys(this.props.filter.notaries).map((key) => {\r\n                                        return(\r\n                                            <Grid item xs={12}>\r\n                                                <FormControlLabel label={this.props.filter.notaries[key]} \r\n                                                    control={ <Checkbox checked=\"\" onChange=\"\" value=\"checkedB\" color=\"primary\" size=\"small\"/>}\r\n                                                />\r\n                                            </Grid>\r\n                                        )\r\n                                    }):null\r\n                                }   \r\n                            </Grid>\r\n                        </div>\r\n                    </div> */}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filter;","import React, { Component } from 'react';\r\nimport '../styles/Vault.scss';\r\nimport Filter from '../components/Filter';\r\nimport { connect } from 'react-redux';\r\nimport * as ActionType from '../store/Actions';\r\nimport { TablePagination } from '@material-ui/core';\r\nimport {Column, PageHeader, Row , DashboardItem} from 'r3-tooling-design-system'\r\n\r\nclass VaultExplorer extends Component{\r\n\r\n    state = {\r\n        filter: {\r\n            offset: 0,\r\n            pageSize: 10,\r\n            stateTypes: [],\r\n            statuses: [],\r\n            relevancies: [],\r\n            parties: [],\r\n            notaries: []\r\n        }\r\n    }\r\n\r\n    handleFilterUpdate = (type, value, checked) => {\r\n        \r\n        if(type === 'stateType'){\r\n            this.handleStateFilters(value, checked);\r\n        }else if(type === 'status'){\r\n            this.handleStatusFilters(value, checked);\r\n        }else if(type === 'relevancy'){\r\n            this.handleRelevancyFilters(value, checked);\r\n        }else if(type === 'party'){\r\n            this.handlePartyFilters(value, checked);\r\n        }\r\n    }\r\n\r\n    handleStateFilters = (value, checked) => {\r\n        let list = this.state.filter.stateTypes;\r\n        if(checked)\r\n            list.push(value);\r\n        else\r\n            list = list.filter((val) => val!==value);\r\n\r\n        this.setState({\r\n            filter: {\r\n                offset: this.state.filter.offset,\r\n                pageSize: this.state.filter.pageSize,\r\n                stateTypes: list,\r\n                statuses: this.state.filter.statuses,\r\n                relevancies: this.state.filter.relevancies,\r\n                parties: this.state.filter.parties,\r\n                notaries: this.state.filter.notaries\r\n            }\r\n        }, this.loadNewPage);\r\n    }\r\n\r\n    handleStatusFilters = (value, checked) => {\r\n        let list = this.state.filter.statuses;\r\n        if(checked)\r\n            list.push(value);\r\n        else\r\n            list = list.filter((val) => val!==value);\r\n                \r\n        this.setState({\r\n            filter: {\r\n                offset: this.state.filter.offset,\r\n                pageSize: this.state.filter.pageSize,\r\n                stateTypes: this.state.filter.stateTypes,\r\n                statuses: list,\r\n                relevancies: this.state.filter.relevancies,\r\n                parties: this.state.filter.parties,\r\n                notaries: this.state.filter.notaries\r\n            }\r\n        }, this.loadNewPage)\r\n    }\r\n\r\n    handleRelevancyFilters = (value, checked) => {\r\n        let list = this.state.filter.relevancies;\r\n        if(checked)\r\n            list.push(value);\r\n        else\r\n            list = list.filter((val) => val!==value);\r\n\r\n        this.setState({\r\n            filter: {\r\n                offset: this.state.filter.offset,\r\n                pageSize: this.state.filter.pageSize,\r\n                stateTypes: this.state.filter.stateTypes,\r\n                statuses: this.state.filter.statuses,\r\n                relevancies: list,\r\n                parties: this.state.filter.parties,\r\n                notaries: this.state.filter.notaries\r\n            }\r\n        }, this.loadNewPage)\r\n    }\r\n\r\n    handlePartyFilters = (value, checked) => {\r\n        let list = this.state.filter.parties;\r\n        if(checked)\r\n            list.push(value);\r\n        else\r\n            list = list.filter((val) => val!==value);\r\n\r\n        this.setState({\r\n            filter: {\r\n                offset: this.state.filter.offset,\r\n                pageSize: this.state.filter.pageSize,\r\n                stateTypes: this.state.filter.stateTypes,\r\n                statuses: this.state.filter.statuses,\r\n                relevancies: this.state.filter.relevancies,\r\n                parties: list,\r\n                notaries: this.state.filter.notaries\r\n            }\r\n        }, this.loadNewPage)\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({\r\n            filter: {\r\n                pageSize: 10,\r\n                offset: newPage,\r\n                stateTypes: this.state.filter.stateTypes,\r\n                statuses: this.state.filter.statuses,\r\n                relevancies: this.state.filter.relevancies,\r\n                parties: this.state.filter.parties,\r\n                notaries: this.state.filter.notaries\r\n            }\r\n        }, this.loadNewPage);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.loadNewPage();\r\n        this.props.fetchFilters();\r\n    }\r\n\r\n    loadNewPage = () => {\r\n        this.props.fetchStates(this.state.filter);   \r\n    }\r\n\r\n    renderJson = (jsonObj, lvl) => {\r\n        return(\r\n            Object.keys(jsonObj).filter((key) => key !== \"@class\").map((key) => {\r\n                return (\r\n                    jsonObj[key] ?\r\n                    <div style={{marginLeft: lvl * 15, paddingBottom: lvl === 0?5:0}}>\r\n                        {lvl === 0?\r\n                        <span><strong>{key}: &nbsp;</strong></span>\r\n                        :\r\n                        <span>{key}: &nbsp;</span>\r\n                        }\r\n\r\n                        {typeof jsonObj[key] === 'object'?\r\n                            this.renderJson(jsonObj[key], lvl+1)\r\n                        :\r\n                        jsonObj[key]+\"\"}\r\n                    </div>:null\r\n                )\r\n            }) \r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                  <PageHeader title=\"The Vault\" size=\"small\" className=\"custom-node-explorer-header\" >\r\n                        The Vault\r\n                    </PageHeader>\r\n\r\n                    <Row>\r\n                        <Column  lg={3}><Filter filter={this.props.filters} handler={(type, value, checked) => this.handleFilterUpdate(type, value, checked)}/></Column>\r\n                        <Column  lg={9}>\r\n                        <Row>\r\n                         \r\n                        {\r\n                            this.props.states?\r\n                            this.props.states.map((state, idx) => {\r\n                                return (\r\n                                       <Column lg={6}>\r\n                                        <div className=\"vault-tile-container\">\r\n                                        <div className=\"tile-header  \">\r\n                                            <div className=\"label\">{this.props.statesMetaData?this.props.statesMetaData[idx].contractStateClassName:null}</div>\r\n                                            <div className=\"label-data \">StateRef: {state.ref.txhash}({state.ref.index})</div>\r\n                                        </div>\r\n                                      \r\n                                                <div className=\"state-content\">\r\n                                                    {this.renderJson(state.state.data, 0)}\r\n                                                </div>\r\n                                   \r\n                                                {\r\n                                                    this.props.statesMetaData?\r\n                                                    <React.Fragment>\r\n                                                     \r\n                                                        <div className=\"meta-container\">\r\n                                                            <div><span><strong>Contract: &nbsp;</strong></span> {state.state.contract}</div>\r\n                                                            <div><span><strong>Recorded Time: &nbsp;</strong></span> {this.props.statesMetaData[idx].recordedTime}</div>\r\n                                                            {this.props.statesMetaData[idx].consumedTime?\r\n                                                                <div><span><strong>ConsumedTime: &nbsp;</strong></span> {this.props.statesMetaData[idx].consumedTime}</div>\r\n                                                            :null\r\n                                                            }\r\n                                                            <div><span><strong>Notary: &nbsp;</strong></span> {this.props.statesMetaData[idx].notary}</div>\r\n                                                            \r\n                                                        </div>\r\n                                                           <div className=\"tile-footer\">\r\n                                                            <div className={`pill ${this.props.statesMetaData[idx].relevancyStatus === 'RELEVANT' ? 'blue' : 'grey'}`}>{this.props.statesMetaData[idx].relevancyStatus}</div>\r\n                                                            <div className={`pill ${this.props.statesMetaData[idx].status==='CONSUMED'?'red':'green'}`}>{this.props.statesMetaData[idx].status}</div>\r\n                                                        </div>\r\n                                                    </React.Fragment>\r\n                                                    :null\r\n                                                }\r\n                                   \r\n                                    </div>\r\n                                    </Column>\r\n                                )\r\n                            }): null\r\n\r\n                        \r\n                        }\r\n                        \r\n                        </Row>\r\n                        {\r\n                            !this.props.states || this.props.states.length === 0? \r\n                                 <div className=\"no-data-found\">\r\n                                        <DashboardItem icon=\"AstronautSittingOnPlanet\">\r\n                                            No States Recorded in The Vault\r\n                                        </DashboardItem>\r\n                                    </div>  : null\r\n                          \r\n                        }\r\n                        {\r\n                            <TablePagination style= {{padding: \"0 10px\", marginTop: 20}}\r\n                                rowsPerPageOptions={[]}\r\n                                component=\"div\"\r\n                                count={this.props.totalResults}\r\n                                rowsPerPage={this.state.filter.pageSize}\r\n                                page={this.state.filter.offset}\r\n                                onChangePage={this.handleChangePage}\r\n                            />\r\n                        }\r\n                    </Column>\r\n                    </Row>\r\n\r\n                    \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        states: state.vault.vaultStates,\r\n        statesMetaData: state.vault.stateMetadata,\r\n        totalResults: state.vault.totalResults,\r\n        filters: state.vault.filters\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchStates: (filters) => dispatch(ActionType.fetchStates(filters)),\r\n        fetchFilters: () => dispatch(ActionType.fetchVaultFilters())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VaultExplorer);\r\n","import React from 'react';\r\nimport '../styles/Tile.scss'\r\nconst Tile = (props) => {\r\n\r\n    return (\r\n        <div className=\"tile-container\">\r\n            <div className=\"tile-title\">\r\n                {props.title}<span className=\"cord-icon\" ></span>\r\n            </div>\r\n            <div className=\"tile-body\">\r\n                {props.children}\r\n            </div>\r\n            <div className=\"tile-footer\">\r\n                {props.footer}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tile;","import React from 'react';\r\nimport { Card } from 'r3-tooling-design-system'\r\nimport Tile from './Tile';\r\nconst NodeDiagnostic = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Card title=\"Node Information\">\r\n                 <div style={{padding: 10, position: \"relative\"}}>\r\n                    <h2><strong>{props.data.vendor}</strong></h2>\r\n                        <div>\r\n                            Version: <strong>{props.data.version}</strong> |\r\n                            Platform Version: <strong>{props.data.platformVersion}</strong>\r\n                        </div>\r\n                        <div style={{position: \"absolute\", top: 10, right: 10}}>Installed Cordapps: <strong>{props.data.cordapps? props.data.cordapps.length:''}</strong></div>\r\n                </div>\r\n            </Card>\r\n            <Card title=\"Installed CorDapps\" style={{marginTop: 10}}>\r\n                  <div className=\"tile-block\" style={{padding: 10, position: \"relative\"}}>\r\n                {\r\n                    props.data?\r\n                    <React.Fragment>\r\n                            {\r\n                                props.data.cordapps?\r\n                                props.data.cordapps.map((cordapp, index) => {\r\n                                    return (\r\n\r\n                                        <Tile title={cordapp.shortName} footer={cordapp.licence} key={index}>\r\n                                             <div key={index} className=\"appInfo-wrapper\">\r\n                                                    <div className=\"\" style={{marginRight: index%2===0?5:0, marginLeft: index%2===0?0:5}}>\r\n                                                        <div><span>Version: </span> {cordapp.version}</div>\r\n                                                        <div><span>Type: </span> {cordapp.type}</div>\r\n                                                        <div><span>Minimum Platform Version: </span> {cordapp.minimumPlatformVersion}</div>\r\n                                                        <div><span>Target Platform Version: </span> {cordapp.targetPlatformVersion}</div>\r\n                                                        <div><span>File: </span> {cordapp.name}.jar</div>\r\n                                                        <div><span>Vendor: </span> {cordapp.vendor}</div>\r\n                                                    </div>\r\n                                                </div>\r\n                                        </Tile>\r\n\r\n                                               \r\n                                    )\r\n                                }): <div className=\"no-data\">No Installed CorDapps</div>\r\n                            }\r\n                    </React.Fragment>:<div className=\"no-data\" style={{height: 280}}>Corda Version 4.3 and higher is required for this widget</div>\r\n                }\r\n                \r\n            </div>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n} \r\n\r\nexport default NodeDiagnostic;","// import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { PieChart, Pie, Cell, ResponsiveContainer } from \"recharts\";\r\n\r\n\r\nconst DonutChart = (props) => {\r\n     \r\n    const data = [{name:props.title, value:props.value}]\r\n    return (\r\n        <React.Fragment>       \r\n            <div className=\"pie-chart\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n\r\n                <PieChart >                  \r\n                    <Pie\r\n                        data={data}\r\n                        cx={100}\r\n                        cy={95}\r\n                        innerRadius={60}\r\n                        outerRadius={80}\r\n                        fill=\"#8884d8\"\r\n                        dataKey=\"value\"\r\n                                    >\r\n                                \r\n                            {data.map((entry, index) => (\r\n                            //   <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />                    \r\n                                <Cell key={`cell-${index}`} fill={props.singleColor}>                              \r\n                                </Cell>\r\n                            ))}\r\n                    </Pie>                \r\n                </PieChart>\r\n                 </ResponsiveContainer>\r\n                <div className=\"rotate-back\">\r\n                    <p>\r\n                        {props.value}{props.valueLabel}\r\n                    </p>\r\n                </div>\r\n                \r\n            </div>\r\n             \r\n            <div className=\"chart-label\">\r\n                <h6>{props.title}</h6>\r\n            </div>\r\n           \r\n        </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default DonutChart;","import React from 'react';\r\nimport { Card, Column, Row } from 'r3-tooling-design-system'\r\nimport DonutChart from './DonutChart';\r\n\r\nconst NetworkParameter = (props) => {\r\n\r\n    return(\r\n        <Card title={\"Network Parameters\"} className=\"max-height\">\r\n            <Row>\r\n                <Column lg={6}>\r\n                    <DonutChart title=\"Minumum Platform Version\" value={props.data.minimumPlatformVersion} singleColor=\"#df0a1b\" valueLabel=\"v\"/>\r\n                </Column>\r\n                  <Column lg={6}>\r\n                    <DonutChart title=\"Max Transaction Size\" value={props.data.maxTransactionSize/(1024 * 1024)} singleColor=\"#df0a1b\" valueLabel=\"MB\"/>\r\n                </Column>\r\n            \r\n            </Row>\r\n            <div style={{padding: 10, position: \"relative\"}}>\r\n\r\n                <div className=\"item\"> Last Modified: <strong>{props.data.modifiedTime}</strong></div>\r\n                <div style={{position: \"absolute\", top: 10, right: 10}}>Version: <strong>{props.data.epoch}</strong></div>\r\n                <div style={{marginTop: 10}}>\r\n                    <div><strong>Notaries</strong></div>\r\n                    {   \r\n                        props.data.notaries && props.data.notaries.length > 0?\r\n                        props.data.notaries.map((notary, index) => {\r\n                            return (\r\n                                        <div key={index} className=\"appInfo-wrapper\">\r\n                                            <div className=\"appInfo\" style={{marginRight: index%2===0?5:0, marginLeft: index%2===0?0:5, marginTop: 5}}>\r\n                                                <div><span>Name: </span>{notary.identity}</div>\r\n                                                <div><span>Type: </span> {notary.validating?'Validating':'Non-Validating'}</div>\r\n                                            </div>\r\n                                        </div>\r\n                            )\r\n                        }): <div style={{padding: \"10px 0\"}}>No Notaries Found</div>\r\n                    }\r\n                </div>\r\n\r\n                <div style={{marginTop: 10}}>\r\n                    <div><strong>Whitelisted Contracts</strong></div>\r\n                    {   \r\n                        props.data.whitelistedContractImplementations && props.data.whitelistedContractImplementations.length > 0?\r\n                        Object.keys(props.data.whitelistedContractImplementations).map((contract, index) => {\r\n                            return (\r\n                                        <div key={index} className=\"appInfo-wrapper\" style={{width: \"100%\"}}>\r\n                                            <div className=\"appInfo\" style={{marginTop: 5}}>\r\n                                                <div><span>Contract: </span>{contract}</div>\r\n                                                <div><span>Hash: </span> {props.data.whitelistedContractImplementations[contract]}</div>\r\n                                            </div>\r\n                                        </div>\r\n                            )\r\n                        }): <div style={{padding: \"10px 0\"}}>No Whitelisted Contracts Found</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Card>    \r\n    );\r\n} \r\n\r\nexport default NetworkParameter;","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport * as ActionType from '../store/Actions';\r\nimport NodeDiagnostic from '../components/NodeDiagnostic'\r\nimport '../styles/Dashboard.scss';\r\nimport { Column, Row, PageHeader } from \"r3-tooling-design-system\";\r\nimport NetworkParameter from \"../components/NetworkParameter\";\r\n\r\nclass Dashboard extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.fetchNodeDiagnostics();\r\n        this.props.fetchNetworkParamters();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <PageHeader title=\"Dashboard\" size=\"small\" className=\"custom-node-explorer-header\" >\r\n             Dashboard\r\n              </PageHeader>\r\n                    <Row>\r\n                        <Column lg={8}>\r\n                        <NodeDiagnostic data={this.props.nodeDiagnostic}/>\r\n                        </Column>    \r\n                        <Column lg={4} className=\"max-height\">\r\n                            <NetworkParameter data={this.props.networkParameter}/>\r\n                        </Column>    \r\n                    </Row>                   \r\n           \r\n            </React.Fragment>\r\n        );\r\n    }    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        nodeDiagnostic: state.dashboard.nodeDiagnostic,\r\n        networkParameter: state.dashboard.networkParameter\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchNodeDiagnostics: () => dispatch(ActionType.fetchNodeDiagnostic()),\r\n        fetchNetworkParamters: () => dispatch(ActionType.fetchNetworkParameter())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import { Grid, TextField } from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport React, { Component } from \"react\";\r\nimport { PageHeader} from 'r3-tooling-design-system'\r\nimport * as ActionType from \"../store/Actions\";\r\n\r\nclass Settings extends Component{\r\n\r\n    state = {\r\n        cordappDirectory: \"\",\r\n        dateFormat: \"\",\r\n        dateTimeFormat: \"\"\r\n    }\r\n\r\n    dirty = {\r\n        cordappDirectory: false,\r\n        dateFormat: false,\r\n        dateTimeFormat: false\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.loadSettings();\r\n    }\r\n\r\n    loadSettings = () => {\r\n        axios.get( ActionType.SERVER_BASE_URL + \"/settings\")\r\n        .then(({data}) => {\r\n            if(data.status){\r\n                const settings = data.data;\r\n                this.setState({\r\n                    cordappDirectory: settings.cordappDirectory,\r\n                    dateFormat: settings.dateFormat,\r\n                    dateTimeFormat: settings.dateTimeFormat\r\n                });\r\n            }else{\r\n                ActionType.errorHandler(data);\r\n            }\r\n        }).catch( error => {\r\n            ActionType.errorHandler(error);\r\n        });\r\n    }\r\n\r\n    handleChange = (event, type) => {\r\n        switch(type){\r\n            case \"cordappDir\":\r\n                this.setState({cordappDirectory: event.target.value});\r\n                this.dirty.cordappDirectory = true;\r\n                break;\r\n            case \"dateFormat\":\r\n                this.setState({dateFormat: event.target.value});\r\n                this.dirty.dateFormat = true;\r\n                break;\r\n            case \"dateTimeFormat\":\r\n                this.setState({dateTimeFormat: event.target.value});\r\n                this.dirty.dateTimeFormat = true;\r\n                break;\r\n            default:\r\n                return;    \r\n        }\r\n    }\r\n\r\n    handleBlur = (type) => {\r\n        switch(type){\r\n            case \"cordappDir\":\r\n                if(this.dirty.cordappDirectory){\r\n                    ActionType.updateSettings(this.state, 'cordappDir');\r\n                    this.dirty.cordappDirectory = false;\r\n                }\r\n                break;\r\n            case \"dateFormat\":\r\n                if(this.dirty.dateFormat){\r\n                    ActionType.updateSettings(this.state, 'dateFormat');\r\n                    this.dirty.dateFormat = false;\r\n                }\r\n                break;\r\n            case \"dateTimeFormat\":\r\n                if(this.dirty.dateTimeFormat){\r\n                    ActionType.updateSettings(this.state, 'dateTimeFormat');\r\n                    this.dirty.dateTimeFormat = false;\r\n                }\r\n                break;   \r\n            default:\r\n                return;     \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return( \r\n            <React.Fragment>\r\n                  <PageHeader title=\"The Vault\" size=\"small\" className=\"custom-node-explorer-header\" >\r\n                       Settings\r\n                    </PageHeader>\r\n                <div style={{padding: \"10px 20px\"}}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={6}>                        \r\n                            <TextField label=\"Enter the path of your cordapps directory\" fullWidth\r\n                                value={this.state.cordappDirectory}\r\n                                onChange={event => this.handleChange(event, 'cordappDir')} \r\n                                onBlur={() => this.handleBlur('cordappDir')} />\r\n                        </Grid>\r\n                        <Grid item xs={6}></Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField label=\"Date Format\" fullWidth\r\n                                value={this.state.dateFormat}\r\n                                onChange={event => this.handleChange(event, 'dateFormat')} \r\n                                onBlur={() => this.handleBlur('dateFormat')} />\r\n                        </Grid>\r\n                        <Grid item xs={6}></Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField label=\"Date Time Format\" fullWidth\r\n                                value={this.state.dateTimeFormat}\r\n                                onChange={event => this.handleChange(event, 'dateTimeFormat')} \r\n                                onBlur={() => this.handleBlur('dateTimeFormat')} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CordaNetwork from './screens/CordaNetwork';\r\nimport TransactionExplorer from './screens/TransactionExplorer';\r\n\r\nimport Header from './components/Header';\r\nimport Login from './screens/Login';\r\nimport SideMenuNew from './components/SideMenuNew';\r\nimport * as ActionType from './store/Actions';\r\nimport VaultExplorer from './screens/VaultExplorer';\r\nimport Dashboard from './screens/Dashboard';\r\nimport Settings from './screens/Settings';\r\nimport { Column, Container, Row} from 'r3-tooling-design-system';\r\n\r\n\r\n\r\n\r\nclass Explorer extends Component {\r\n\r\n    componentDidMount(){\r\n      this.props.getApplicationState();\r\n    }\r\n\r\n    render(){\r\n      return (\r\n        <React.Fragment>\r\n          {this.props.isLoggedIn ?\r\n            <React.Fragment>\r\n              <Header />              \r\n              <Container className=\"no-marg max-height\">\r\n                <Row className=\"max-height no-gap\">\r\n                  <Column sm={1} md={1} lg={1}>\r\n                     <SideMenuNew />\r\n                  </Column>\r\n                   <Column sm={11} md={11} lg={11}>            \r\n                    <div className=\"content-pane\">\r\n                      {\r\n                        this.props.spinner? \r\n                        <div className=\"spinner\">\r\n                          <div>\r\n                              <img style={{width: 100}} src=\"spinner.svg\" alt=\"Spinner\"></img>\r\n                          </div>\r\n                          </div>:null\r\n                      }\r\n                      {\r\n                        this.props.currentPage === 0 ? <Dashboard/>: \r\n                        this.props.currentPage === 1 ? <CordaNetwork/>: \r\n                        this.props.currentPage === 2 ? <TransactionExplorer/>:\r\n                        this.props.currentPage === 3 ? <VaultExplorer/>: \r\n                        this.props.currentPage === 4 ? <Settings/>: \r\n                        <Dashboard/>\r\n                      }\r\n                    </div> \r\n              \r\n                  </Column>\r\n                </Row>\r\n                </Container>\r\n                </React.Fragment> \r\n                  \r\n              : \r\n              <Login></Login>\r\n            }\r\n        </React.Fragment>\r\n      );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.common.isLoggedIn,\r\n        currentPage: state.common.currentPage,\r\n        spinner: state.common.spinner\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n      onLoginSuccess: () => dispatch({type: ActionType.LOGIN_SUCCESS}),\r\n      getApplicationState: () => dispatch({type: ActionType.LOAD_APP_STATE}),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Explorer);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport ReduxToastr from 'react-redux-toastr'\r\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\r\nimport {reducer as toastrReducer} from 'react-redux-toastr'\r\nimport commonReducer from './store/reducers/CommonReducer';\r\nimport explorerReducer from './store/reducers/ExplorerReducer';\r\nimport txReducer from './store/reducers/TxExplorerReducer'\r\nimport vltReducer from './store/reducers/VaultReducer'\r\nimport dsbdReducer from './store/reducers/DashboardReducer'\r\nimport thunk from \"redux-thunk\";\r\nimport Explorer from './Explorer';\r\nimport './index.scss';\r\nimport 'react-redux-toastr/lib/css/react-redux-toastr.min.css'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport 'r3-tooling-design-system/lib/index.scss';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    common: commonReducer,\r\n    explorer: explorerReducer,\r\n    trnx: txReducer,\r\n    toastr: toastrReducer,\r\n    vault: vltReducer,\r\n    dashboard: dsbdReducer\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <div style={{height: \"100%\"}}>\r\n        <Explorer/>\r\n        <ReduxToastr\r\n            timeOut={3000}\r\n            newestOnTop={false}\r\n            preventDuplicates\r\n            position=\"top-right\"\r\n            getState={(state) => state.toastr}\r\n            transitionIn=\"fadeIn\"\r\n            transitionOut=\"fadeOut\"\r\n            progressBar\r\n            s\r\n            closeOnToastrClick/>\r\n    </div>\r\n    </Provider>, \r\ndocument.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}